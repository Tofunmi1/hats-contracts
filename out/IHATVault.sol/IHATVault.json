{
  "abi": [
    {
      "inputs": [],
      "name": "ActiveClaimExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BountyPercentageHigherThanMaxBounty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSetToPerviousRewardController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferToAnotherUserWithActiveWithdrawRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengePeriodEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimAlreadyChallenged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimIdIsNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeAlreadyCheckedIn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeBountyCannotBeMoreThanMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitteeNotCheckedInYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelayPeriodForSettingMaxBountyHadNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxBountyCannotBeMoreThanMaxBountyLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveClaimExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPendingMaxBounty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFeePaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughUserBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSafetyPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyArbitratorOrRegistryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCallableIfChallenged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCommittee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyFeeSetter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRegistryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemMoreThanMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafetyPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetSharesArraysMustHaveSameLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SystemInEmergencyPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSplitPercentageShouldBeHundredPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingDurationSmallerThanPeriods",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingPeriodsCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFeeTooBig",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bountyPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenLock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "hacker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hackerVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "committee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hackerHatVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governanceHat",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IHATVault.ClaimBounty",
          "name": "_claimBounty",
          "type": "tuple"
        }
      ],
      "name": "ApproveClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "ChallengeClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CommitteeCheckedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "DismissClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "name": "SetArbitrator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IHATVault.ArbitratorCanChangeBounty",
          "name": "_arbitratorCanChangeBounty",
          "type": "uint8"
        }
      ],
      "name": "SetArbitratorCanChangeBounty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "hackerVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hacker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "committee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IHATVault.BountySplit",
          "name": "_bountySplit",
          "type": "tuple"
        }
      ],
      "name": "SetBountySplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "SetChallengePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_challengeTimeOutPeriod",
          "type": "uint256"
        }
      ],
      "name": "SetChallengeTimeOutPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        }
      ],
      "name": "SetCommittee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_depositPause",
          "type": "bool"
        }
      ],
      "name": "SetDepositPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bountyGovernanceHAT",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bountyHackerHATVested",
          "type": "uint256"
        }
      ],
      "name": "SetHATBountySplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxBounty",
          "type": "uint256"
        }
      ],
      "name": "SetMaxBounty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxBounty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timeStamp",
          "type": "uint256"
        }
      ],
      "name": "SetPendingMaxBounty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRewardController",
          "name": "_newRewardController",
          "type": "address"
        }
      ],
      "name": "SetRewardController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "SetVaultDescription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_periods",
          "type": "uint256"
        }
      ],
      "name": "SetVestingParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "SetWithdrawalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bountyPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "SubmitClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawEnableTime",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRequest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bountyPercentage",
          "type": "uint256"
        }
      ],
      "name": "approveClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "assetTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "challengeClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "committeeCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "dismissClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBountyGovernanceHAT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBountyHackerHATVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChallengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChallengeTimeOutPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IRewardController",
              "name": "rewardController",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingPeriods",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBounty",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hackerVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hacker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "committee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IHATVault.BountySplit",
              "name": "bountySplit",
              "type": "tuple"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "committee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "descriptionHash",
              "type": "string"
            }
          ],
          "internalType": "struct IHATVault.VaultInitParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeemAndFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdrawAndFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeemAndClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardController",
          "type": "address"
        }
      ],
      "name": "rewardControllerRemoved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "name": "setArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IHATVault.ArbitratorCanChangeBounty",
          "name": "_arbitratorCanChangeBounty",
          "type": "uint8"
        }
      ],
      "name": "setArbitratorCanChangeBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "hackerVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hacker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "committee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IHATVault.BountySplit",
          "name": "_bountySplit",
          "type": "tuple"
        }
      ],
      "name": "setBountySplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "setChallengePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeTimeOutPeriod",
          "type": "uint256"
        }
      ],
      "name": "setChallengeTimeOutPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        }
      ],
      "name": "setCommittee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_depositPause",
          "type": "bool"
        }
      ],
      "name": "setDepositPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bountyGovernanceHAT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bountyHackerHATVested",
          "type": "uint256"
        }
      ],
      "name": "setHATBountySplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setMaxBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxBounty",
          "type": "uint256"
        }
      ],
      "name": "setPendingMaxBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardController",
          "name": "_newRewardController",
          "type": "address"
        }
      ],
      "name": "setRewardController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "setVaultDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_periods",
          "type": "uint256"
        }
      ],
      "name": "setVestingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bountyPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "submitClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalManagedAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "approveClaim(bytes32,uint256)": "99ab34e0",
    "asset()": "38d52e0f",
    "balanceOf(address)": "70a08231",
    "challengeClaim(bytes32)": "04165db1",
    "committeeCheckIn()": "a397a635",
    "convertToAssets(uint256)": "07a2d13a",
    "convertToShares(uint256)": "c6e6f592",
    "decimals()": "313ce567",
    "deposit(uint256,address)": "6e553f65",
    "dismissClaim(bytes32)": "d52d5ee7",
    "emergencyWithdraw(address)": "6ff1c9bc",
    "getArbitrator()": "0fceb746",
    "getBountyGovernanceHAT()": "551bd417",
    "getBountyHackerHATVested()": "fb45153e",
    "getChallengePeriod()": "7864b77d",
    "getChallengeTimeOutPeriod()": "6da9a3ec",
    "initialize((address,uint256,uint256,uint256,(uint256,uint256,uint256),address,address,address,bool,string))": "7278410d",
    "maxDeposit(address)": "402d267d",
    "maxMint(address)": "c63d75b6",
    "maxRedeem(address)": "d905777e",
    "maxWithdraw(address)": "ce96cb77",
    "mint(uint256,address)": "94bf804d",
    "name()": "06fdde03",
    "previewDeposit(uint256)": "ef8b30f7",
    "previewMint(uint256)": "b3d7f6b9",
    "previewRedeem(uint256)": "4cdad506",
    "previewRedeemAndFee(uint256)": "f4d0fb99",
    "previewWithdraw(uint256)": "0a28a477",
    "previewWithdrawAndFee(uint256)": "c9e55529",
    "redeem(uint256,address,address)": "ba087652",
    "redeemAndClaim(uint256,address,address)": "7901808b",
    "rewardControllerRemoved(address)": "dc5ba607",
    "setArbitrator(address)": "b0eefabe",
    "setArbitratorCanChangeBounty(uint8)": "436b6c83",
    "setBountySplit((uint256,uint256,uint256))": "b5ff6d57",
    "setChallengePeriod(uint256)": "5d475fdd",
    "setChallengeTimeOutPeriod(uint256)": "59673323",
    "setCommittee(address)": "bddae40e",
    "setDepositPause(bool)": "86d192e5",
    "setHATBountySplit(uint256,uint256)": "21462162",
    "setMaxBounty()": "f10284c6",
    "setPendingMaxBounty(uint256)": "a5aef6e1",
    "setRewardController(address)": "7c993961",
    "setVaultDescription(string)": "a417e00c",
    "setVestingParams(uint256,uint256)": "eb658878",
    "setWithdrawalFee(uint256)": "ac1e5025",
    "submitClaim(address,uint256,string)": "34dc3c66",
    "symbol()": "95d89b41",
    "totalAssets()": "01e1d114",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "withdraw(uint256,address,address)": "b460af94",
    "withdrawAndClaim(uint256,address,address)": "d0855293",
    "withdrawRequest()": "380e687a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActiveClaimExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyPercentageHigherThanMaxBounty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetToPerviousRewardController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferToAnotherUserWithActiveWithdrawRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengePeriodEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimAlreadyChallenged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimIdIsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeAlreadyCheckedIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeBountyCannotBeMoreThanMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommitteeNotCheckedInYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayPeriodForSettingMaxBountyHadNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBountyCannotBeMoreThanMaxBountyLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveClaimExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPendingMaxBounty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFeePaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughUserBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSafetyPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyArbitratorOrRegistryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableIfChallenged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCommittee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyFeeSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegistryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemMoreThanMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafetyPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetSharesArraysMustHaveSameLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemInEmergencyPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSplitPercentageShouldBeHundredPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingDurationSmallerThanPeriods\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingPeriodsCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFeeTooBig\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bountyPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenLock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hackerVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hackerHatVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceHat\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IHATVault.ClaimBounty\",\"name\":\"_claimBounty\",\"type\":\"tuple\"}],\"name\":\"ApproveClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"ChallengeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CommitteeCheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"DismissClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"SetArbitrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IHATVault.ArbitratorCanChangeBounty\",\"name\":\"_arbitratorCanChangeBounty\",\"type\":\"uint8\"}],\"name\":\"SetArbitratorCanChangeBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hackerVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IHATVault.BountySplit\",\"name\":\"_bountySplit\",\"type\":\"tuple\"}],\"name\":\"SetBountySplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"SetChallengePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_challengeTimeOutPeriod\",\"type\":\"uint256\"}],\"name\":\"SetChallengeTimeOutPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"SetCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_depositPause\",\"type\":\"bool\"}],\"name\":\"SetDepositPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bountyGovernanceHAT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bountyHackerHATVested\",\"type\":\"uint256\"}],\"name\":\"SetHATBountySplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBounty\",\"type\":\"uint256\"}],\"name\":\"SetMaxBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"SetPendingMaxBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRewardController\",\"name\":\"_newRewardController\",\"type\":\"address\"}],\"name\":\"SetRewardController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"SetVaultDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"SetVestingParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bountyPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"SubmitClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawEnableTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bountyPercentage\",\"type\":\"uint256\"}],\"name\":\"approveClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"challengeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committeeCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"dismissClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBountyGovernanceHAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBountyHackerHATVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengeTimeOutPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"rewardController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBounty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hackerVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committee\",\"type\":\"uint256\"}],\"internalType\":\"struct IHATVault.BountySplit\",\"name\":\"bountySplit\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"committee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"descriptionHash\",\"type\":\"string\"}],\"internalType\":\"struct IHATVault.VaultInitParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeemAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdrawAndFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeemAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardController\",\"type\":\"address\"}],\"name\":\"rewardControllerRemoved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IHATVault.ArbitratorCanChangeBounty\",\"name\":\"_arbitratorCanChangeBounty\",\"type\":\"uint8\"}],\"name\":\"setArbitratorCanChangeBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hackerVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committee\",\"type\":\"uint256\"}],\"internalType\":\"struct IHATVault.BountySplit\",\"name\":\"_bountySplit\",\"type\":\"tuple\"}],\"name\":\"setBountySplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"setChallengePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeTimeOutPeriod\",\"type\":\"uint256\"}],\"name\":\"setChallengeTimeOutPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_depositPause\",\"type\":\"bool\"}],\"name\":\"setDepositPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bountyGovernanceHAT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountyHackerHATVested\",\"type\":\"uint256\"}],\"name\":\"setHATBountySplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBounty\",\"type\":\"uint256\"}],\"name\":\"setPendingMaxBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardController\",\"name\":\"_newRewardController\",\"type\":\"address\"}],\"name\":\"setRewardController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"setVaultDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"setVestingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bountyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"submitClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Hats.finance\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveClaim(bytes32,uint256)\":{\"params\":{\"_bountyPercentage\":\"The percentage of the vault's balance that will be sent as a bounty. This value will be ignored if the caller is not the arbitrator.\",\"_claimId\":\"The claim ID\"}},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"challengeClaim(bytes32)\":{\"params\":{\"_claimId\":\"The claim ID\"}},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Deposit funds to the vault. Can only be called if the committee had checked in and deposits are not paused, and the registry is not in an emergency pause.See {IERC4626-deposit}.\",\"params\":{\"assets\":\"Amount of vault's native token to deposit\",\"receiver\":\"Reciever of the shares from the deposit\"}},\"dismissClaim(bytes32)\":{\"params\":{\"_claimId\":\"The claim ID\"}},\"emergencyWithdraw(address)\":{\"params\":{\"receiver\":\"Address of receiver of the funds \"}},\"getArbitrator()\":{\"returns\":{\"_0\":\"The address of the vault's arbitrator\"}},\"getBountyGovernanceHAT()\":{\"returns\":{\"_0\":\"The vault's HAT bounty split part that goes to the governance\"}},\"getBountyHackerHATVested()\":{\"returns\":{\"_0\":\"The vault's HAT bounty split part that is veested for the hacker\"}},\"getChallengePeriod()\":{\"returns\":{\"_0\":\"The vault's challenge period\"}},\"getChallengeTimeOutPeriod()\":{\"returns\":{\"_0\":\"The vault's challenge timeout period\"}},\"initialize((address,uint256,uint256,uint256,(uint256,uint256,uint256),address,address,address,bool,string))\":{\"details\":\"See {IHATVault-VaultInitParams} for more detailsCalled when the vault is created in {IHATVaultsRegistry-createVault}\",\"params\":{\"_params\":\"The vault initialization parameters\"}},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewRedeemAndFee(uint256)\":{\"returns\":{\"assets\":\"amount of assets to be sent in exchange for the amount of shares specified\",\"fee\":\"The amount of assets that will be paid as fee\"}},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewWithdrawAndFee(uint256)\":{\"returns\":{\"fee\":\"The amount of assets that will be paid as fee\",\"shares\":\"The amount of shares to be burned to get the requested amount of assets\"}},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}.\",\"params\":{\"owner\":\"Address of owner of the funds \",\"receiver\":\"Address of receiver of the funds \",\"shares\":\"Amount of shares to redeem\"}},\"redeemAndClaim(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}.\",\"params\":{\"owner\":\"Address of owner of the funds \",\"receiver\":\"Address of receiver of the funds \",\"shares\":\"Amount of shares to redeem\"}},\"rewardControllerRemoved(address)\":{\"params\":{\"_rewardController\":\"the reward controller to check\"},\"returns\":{\"_0\":\"bool Whether the reward contoller was previously used in the vault and removed\"}},\"setArbitrator(address)\":{\"params\":{\"_arbitrator\":\"The address of vault's arbitrator\"}},\"setArbitratorCanChangeBounty(uint8)\":{\"params\":{\"_arbitratorCanChangeBounty\":\"Whether the arbitrator can change a claim bounty percentage\"}},\"setBountySplit((uint256,uint256,uint256))\":{\"params\":{\"_bountySplit\":\"The bounty split\"}},\"setChallengePeriod(uint256)\":{\"params\":{\"_challengePeriod\":\"The vault's challenge period\"}},\"setChallengeTimeOutPeriod(uint256)\":{\"params\":{\"_challengeTimeOutPeriod\":\"The vault's challenge timeout period\"}},\"setCommittee(address)\":{\"params\":{\"_committee\":\"The address of the new committee \"}},\"setDepositPause(bool)\":{\"params\":{\"_depositPause\":\"Are deposits paused\"}},\"setHATBountySplit(uint256,uint256)\":{\"params\":{\"_bountyGovernanceHAT\":\"The HAT bounty for governance\",\"_bountyHackerHATVested\":\"The HAT bounty vested for the hacker\"}},\"setPendingMaxBounty(uint256)\":{\"params\":{\"_maxBounty\":\"The maximum bounty percentage that can be paid out\"}},\"setRewardController(address)\":{\"params\":{\"_newRewardController\":\"The new reward controller\"}},\"setVaultDescription(string)\":{\"params\":{\"_descriptionHash\":\"the hash of the vault's description\"}},\"setVestingParams(uint256,uint256)\":{\"params\":{\"_duration\":\"Duration of the vesting period. Must be smaller than 120 days and bigger than `_periods`\",\"_periods\":\"Number of vesting periods. Cannot be 0.\"}},\"setWithdrawalFee(uint256)\":{\"params\":{\"_fee\":\"The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`\"}},\"submitClaim(address,uint256,string)\":{\"params\":{\"_beneficiary\":\"The submitted claim's beneficiary\",\"_bountyPercentage\":\"The submitted claim's bug requested reward percentage\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}.\",\"params\":{\"assets\":\"Amount of tokens to withdraw\",\"owner\":\"Address of owner of the funds \",\"receiver\":\"Address of receiver of the funds \"}},\"withdrawAndClaim(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}.\",\"params\":{\"assets\":\"Amount of tokens to withdraw\",\"owner\":\"Address of owner of the funds\",\"receiver\":\"Address of receiver of the funds\"}}},\"title\":\"Interface for Hats.finance Vaults\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveClaim(bytes32,uint256)\":{\"notice\":\"Approve a claim for a bounty submitted by a committee, and pay out bounty to hacker and committee. Also transfer to the  HATVaultsRegistry the part of the bounty that will be swapped to HAT  tokens. If the claim had been previously challenged, this is only callable by the arbitrator. Otherwise, callable by anyone after challengePeriod had passed.\"},\"challengeClaim(bytes32)\":{\"notice\":\"Called by the arbitrator or governance to challenge a claim for a bounty payout that had been previously submitted by the committee. Can only be called during the challenge period after submission of the claim.\"},\"committeeCheckIn()\":{\"notice\":\"Called by the vault's committee to claim it's role. Deposits are enabled only after committee check in.\"},\"dismissClaim(bytes32)\":{\"notice\":\"Dismiss the active claim for bounty payout submitted by the committee. Called either by the arbitrator, or by anyone if the claim has timed out.\"},\"emergencyWithdraw(address)\":{\"notice\":\"Redeem all of the user's shares in the vault for the respective amount of underlying assets without calling the reward controller, meaning user renounces their uncommited part of the reward. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout.\"},\"getArbitrator()\":{\"notice\":\"Returns the address of the vault's arbitrator If no specific value for this vault has been set, the registry's default value will be returned.\"},\"getBountyGovernanceHAT()\":{\"notice\":\"Returns the vault HAT bounty split part that goes to the governance If no specific value for this vault has been set, the registry's default value will be returned.\"},\"getBountyHackerHATVested()\":{\"notice\":\"Returns the vault HAT bounty split part that is veested for the hacker If no specific value for this vault has been set, the registry's default value will be returned.\"},\"getChallengePeriod()\":{\"notice\":\"Returns the period of time after a claim for a bounty payout has been submitted that it can be challenged by the arbitrator. If no specific value for this vault has been set, the registry's default value will be returned.\"},\"getChallengeTimeOutPeriod()\":{\"notice\":\"Returns the period of time after which a claim for a bounty payout can be dismissed by anyone. If no specific value for this vault has been set, the registry's default value will be returned.\"},\"initialize((address,uint256,uint256,uint256,(uint256,uint256,uint256),address,address,address,bool,string))\":{\"notice\":\"Initialize a vault instance\"},\"previewRedeemAndFee(uint256)\":{\"notice\":\"Returns the amount of assets to be sent to the user for the exact amount of shares to redeem. Also returns the amount assets to be paid as fee.\"},\"previewWithdrawAndFee(uint256)\":{\"notice\":\"Returns the amount of shares to be burned to give the user the exact amount of assets requested plus cover for the fee. Also returns the amount assets to be paid as fee.\"},\"redeem(uint256,address,address)\":{\"notice\":\"Redeem shares in the vault for the respective amount of underlying assets, without transferring the accumulated HAT reward. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout.\"},\"redeemAndClaim(uint256,address,address)\":{\"notice\":\"Redeem shares in the vault for the respective amount of underlying assets and claim the HAT reward that the user has earned. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout.\"},\"setArbitrator(address)\":{\"notice\":\"Called by the registry's owner to set the vault arbitrator If the value passed is the special \\\"null\\\" value the vault will use the registry's default value.\"},\"setArbitratorCanChangeBounty(uint8)\":{\"notice\":\"Called by the registry's owner to set whether the arbitrator can change a claim bounty percentage If the value passed is the special \\\"null\\\" value the vault will use the registry's default value.\"},\"setBountySplit((uint256,uint256,uint256))\":{\"notice\":\"Called by the vault's owner to set the vault token bounty split upon an approval. Can only be called if is no active claim and not during safety periods.\"},\"setChallengePeriod(uint256)\":{\"notice\":\"Called by the registry's owner to set the period of time after a claim for a bounty payout has been submitted that it can be challenged by the arbitrator. If the value passed is the special \\\"null\\\" value the vault will use the registry's default value.\"},\"setChallengeTimeOutPeriod(uint256)\":{\"notice\":\"Called by the registry's owner to set the period of time after which a claim for a bounty payout can be dismissed by anyone. If the value passed is the special \\\"null\\\" value the vault will use the registry's default value.\"},\"setCommittee(address)\":{\"notice\":\"Set new committee address. Can be called by existing committee, or by the the vault's owner in the case that the committee hadn't checked in yet.\"},\"setDepositPause(bool)\":{\"notice\":\"Called by the vault's owner to disable all deposits to the vault\"},\"setHATBountySplit(uint256,uint256)\":{\"notice\":\"Called by the registry's owner to set the vault HAT token bounty  split upon an approval. If the value passed is the special \\\"null\\\" value the vault will use the registry's default value.\"},\"setMaxBounty()\":{\"notice\":\"Called by the vault's owner to set the vault's max bounty to the already pending max bounty. Cannot be called if there are active claims that have been submitted. Can only be called if there is a max bounty pending approval, and the time delay since setting the pending max bounty had passed.\"},\"setPendingMaxBounty(uint256)\":{\"notice\":\"Called by the vault's owner to set a pending request for the maximum percentage of the vault that can be paid out as a bounty. Cannot be called if there is an active claim that has been submitted. Max bounty should be less than or equal to 90% (defined as 9000). The pending value can be set by the owner after the time delay (of  {HATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed.\"},\"setRewardController(address)\":{\"notice\":\"Called by the registry's owner to set the vault's reward controller\"},\"setVaultDescription(string)\":{\"notice\":\"Called by the registry's owner to change the description of the vault in the Hats.finance UI\"},\"setVestingParams(uint256,uint256)\":{\"notice\":\"Called by the vault's owner to set the vesting params for the part of the bounty that the hacker gets vested in the vault's native token\"},\"setWithdrawalFee(uint256)\":{\"notice\":\"Called by the registry's fee setter to set the fee for  withdrawals from the vault.\"},\"submitClaim(address,uint256,string)\":{\"notice\":\"Called by the committee to submit a claim for a bounty payout. This function should be called only on a safety period, when withdrawals are disabled, and while there's no other active claim. Cannot be called when the registry is in an emergency pause. Upon a call to this function by the committee the vault's withdrawals will be disabled until the claim is approved or dismissed. Also from the time of this call the arbitrator will have a period of  {HATVaultsRegistry.challengePeriod} to challenge the claim.\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Withdraw previously deposited funds from the vault, without transferring the accumulated HAT reward. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout.\"},\"withdrawAndClaim(uint256,address,address)\":{\"notice\":\"Withdraw previously deposited funds from the vault and claim the HAT reward that the user has earned. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout.\"},\"withdrawRequest()\":{\"notice\":\"Submit a request to withdraw funds from the vault. The request will only be approved if there is no previous active withdraw request. The request will be pending for a period of {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod}, after which a withdraw will be possible for a duration of {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}\"}},\"notice\":\"A HATVault holds the funds for a specific project's bug bounties. The HATVault can be deposited into in a permissionless maner using the vault\\u2019s native token. When a bug is submitted and approved, the bounty  is paid out using the funds in the vault. Bounties are paid out as a percentage of the vault. The percentage is set according to the severity of the bug. Vaults have regular safety periods (typically for an hour twice a day) which are time for the committee to make decisions. In addition to the roles defined in the HATVaultsRegistry, every HATVault  has the roles: Committee - The only address which can submit a claim for a bounty payout and set the maximum bounty. User - Anyone can deposit the vault's native token into the vault and  recieve shares for it. Shares represent the user's relative part in the vault, and when a bounty is paid out, users lose part of their deposits (based on percentage paid), but keep their share of the vault. Users also receive rewards for their deposits, which can be claimed at any  time. To withdraw previously deposited tokens, a user must first send a withdraw request, and the withdrawal will be made available after a pending period. Withdrawals are not permitted during safety periods or while there is an  active claim for a bounty payout. Bounties are payed out distributed between a few channels, and that  distribution is set upon creation (the hacker gets part in direct transfer, part in vested reward and part in vested HAT token, part gets rewarded to the committee, part gets swapped to HAT token and burned and/or sent to Hats governance). NOTE: Vaults should not use tokens which do not guarantee that the amount specified is the amount transferred This project is open-source and can be found at: https://github.com/hats-finance/hats-contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IHATVault.sol\":\"IHATVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IHATVault.sol\":{\"keccak256\":\"0x39ef58e6b37e2ef32d8cf51f29b810f4925fcd261779ffbcc7b040ea2a42faae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bc7459e54a4fe3e79e14184098893f88c52ed4c47f52ebf04665bece9ebf237\",\"dweb:/ipfs/QmZNdrpZGpJgkBhbQmd1zkzZHnw15fBDeVDkK8tex5b6Vn\"]},\"contracts/interfaces/IHATVaultsRegistry.sol\":{\"keccak256\":\"0x9500d5ca066f89ebccaf468dad591dca8bf8c7f6673767aa38185840999ed8ce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17b4fb74dbf539612fbbfd3f4f26e59f56970608a2b10a9a8d54f7beae51bb7c\",\"dweb:/ipfs/QmY3hkcfrbAirsWNpsBHn8347Yq5TBm56n1bjWi5JLrj2o\"]},\"contracts/interfaces/IRewardController.sol\":{\"keccak256\":\"0x8e7198df19e0036e6d09121b934fbd5f0df52a38a0bb0fd66cbcc3dfce03edf5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3cdb4bce2ba60445c091431bb6b8dfd1193ff90ce0247375d479f47c447aec6\",\"dweb:/ipfs/QmZiMFn9WjQEDQkL9uh9hegPSgJvNqdDgad7SpdjPeYt9M\"]},\"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"keccak256\":\"0x2e991b91bca58c198c3ecd905d281c5e9ae230f4f34f14835294d5fa2d478991\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2cbb3c9fba2ef72dd7a9226296cddcb764bef17d4d5b522c94818a8ee9a390a6\",\"dweb:/ipfs/QmdFhEFbcmzFba6hMN1xFakCzUCsPuRwtEvU2GTKQTxkae\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ActiveClaimExists"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AmountCannotBeZero"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BountyPercentageHigherThanMaxBounty"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CannotSetToPerviousRewardController"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CannotTransferToAnotherUserWithActiveWithdrawRequest"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CannotTransferToSelf"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ChallengePeriodEnded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ClaimAlreadyChallenged"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ClaimExpired"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ClaimIdIsNotActive"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CommitteeAlreadyCheckedIn"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CommitteeBountyCannotBeMoreThanMax"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CommitteeNotCheckedInYet"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DelayPeriodForSettingMaxBountyHadNotPassed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MaxBountyCannotBeMoreThanMaxBountyLimit"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoActiveClaimExists"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoPendingMaxBounty"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotEnoughFeePaid"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotEnoughUserBalance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotSafetyPeriod"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyArbitratorOrRegistryOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyCallableIfChallenged"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyCommittee"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyFeeSetter"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OnlyRegistryOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RedeemMoreThanMax"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SafetyPeriod"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SetSharesArraysMustHaveSameLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SystemInEmergencyPause"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TotalSplitPercentageShouldBeHundredPercent"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "VestingDurationSmallerThanPeriods"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "VestingDurationTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "VestingPeriodsCannotBeZero"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawMustBeGreaterThanZero"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawalFeeTooBig"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_committee",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_bountyPercentage",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "_tokenLock",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "struct IHATVault.ClaimBounty",
              "name": "_claimBounty",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hacker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hackerVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "committee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hackerHatVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "governanceHat",
                  "type": "uint256"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApproveClaim",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ChallengeClaim",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "CommitteeCheckedIn",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Deposit",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "DismissClaim",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_arbitrator",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetArbitrator",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "enum IHATVault.ArbitratorCanChangeBounty",
              "name": "_arbitratorCanChangeBounty",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetArbitratorCanChangeBounty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IHATVault.BountySplit",
              "name": "_bountySplit",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hackerVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hacker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "committee",
                  "type": "uint256"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetBountySplit",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_challengePeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetChallengePeriod",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_challengeTimeOutPeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetChallengeTimeOutPeriod",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_committee",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetCommittee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_depositPause",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetDepositPause",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bountyGovernanceHAT",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_bountyHackerHATVested",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetHATBountySplit",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxBounty",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetMaxBounty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxBounty",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_timeStamp",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetPendingMaxBounty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IRewardController",
              "name": "_newRewardController",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetRewardController",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetVaultDescription",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_duration",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_periods",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetVestingParams",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_newFee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetWithdrawalFee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_committee",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_bountyPercentage",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SubmitClaim",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Withdraw",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_withdrawEnableTime",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "WithdrawRequest",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_bountyPercentage",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approveClaim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "asset",
          "outputs": [
            {
              "internalType": "address",
              "name": "assetTokenAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "challengeClaim"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "committeeCheckIn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "convertToAssets",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "convertToShares",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "dismissClaim"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "emergencyWithdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getArbitrator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBountyGovernanceHAT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBountyHackerHATVested",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getChallengePeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getChallengeTimeOutPeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IHATVault.VaultInitParams",
              "name": "_params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IRewardController",
                  "name": "rewardController",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "vestingDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "vestingPeriods",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxBounty",
                  "type": "uint256"
                },
                {
                  "internalType": "struct IHATVault.BountySplit",
                  "name": "bountySplit",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "hackerVested",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hacker",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "committee",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "contract IERC20",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "committee",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isPaused",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "descriptionHash",
                  "type": "string"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxDeposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "maxAssets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "maxShares",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxRedeem",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "maxShares",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "maxWithdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "maxAssets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "previewDeposit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "previewMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "previewRedeem",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "previewRedeemAndFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "previewWithdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "previewWithdrawAndFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "redeem",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "redeemAndClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_rewardController",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "rewardControllerRemoved",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_arbitrator",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setArbitrator"
        },
        {
          "inputs": [
            {
              "internalType": "enum IHATVault.ArbitratorCanChangeBounty",
              "name": "_arbitratorCanChangeBounty",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setArbitratorCanChangeBounty"
        },
        {
          "inputs": [
            {
              "internalType": "struct IHATVault.BountySplit",
              "name": "_bountySplit",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hackerVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hacker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "committee",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setBountySplit"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_challengePeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setChallengePeriod"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_challengeTimeOutPeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setChallengeTimeOutPeriod"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_committee",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCommittee"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_depositPause",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDepositPause"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bountyGovernanceHAT",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_bountyHackerHATVested",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setHATBountySplit"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMaxBounty"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxBounty",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPendingMaxBounty"
        },
        {
          "inputs": [
            {
              "internalType": "contract IRewardController",
              "name": "_newRewardController",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRewardController"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setVaultDescription"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_periods",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setVestingParams"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fee",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setWithdrawalFee"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bountyPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "submitClaim",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "claimId",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalAssets",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "totalManagedAssets",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawAndClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawRequest"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
          },
          "approve(address,uint256)": {
            "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
          },
          "approveClaim(bytes32,uint256)": {
            "params": {
              "_bountyPercentage": "The percentage of the vault's balance that will be sent as a bounty. This value will be ignored if the caller is not the arbitrator.",
              "_claimId": "The claim ID"
            }
          },
          "asset()": {
            "details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
          },
          "balanceOf(address)": {
            "details": "Returns the amount of tokens owned by `account`."
          },
          "challengeClaim(bytes32)": {
            "params": {
              "_claimId": "The claim ID"
            }
          },
          "convertToAssets(uint256)": {
            "details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
          },
          "convertToShares(uint256)": {
            "details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
          },
          "decimals()": {
            "details": "Returns the decimals places of the token."
          },
          "deposit(uint256,address)": {
            "details": "Deposit funds to the vault. Can only be called if the committee had checked in and deposits are not paused, and the registry is not in an emergency pause.See {IERC4626-deposit}.",
            "params": {
              "assets": "Amount of vault's native token to deposit",
              "receiver": "Reciever of the shares from the deposit"
            }
          },
          "dismissClaim(bytes32)": {
            "params": {
              "_claimId": "The claim ID"
            }
          },
          "emergencyWithdraw(address)": {
            "params": {
              "receiver": "Address of receiver of the funds "
            }
          },
          "getArbitrator()": {
            "returns": {
              "_0": "The address of the vault's arbitrator"
            }
          },
          "getBountyGovernanceHAT()": {
            "returns": {
              "_0": "The vault's HAT bounty split part that goes to the governance"
            }
          },
          "getBountyHackerHATVested()": {
            "returns": {
              "_0": "The vault's HAT bounty split part that is veested for the hacker"
            }
          },
          "getChallengePeriod()": {
            "returns": {
              "_0": "The vault's challenge period"
            }
          },
          "getChallengeTimeOutPeriod()": {
            "returns": {
              "_0": "The vault's challenge timeout period"
            }
          },
          "initialize((address,uint256,uint256,uint256,(uint256,uint256,uint256),address,address,address,bool,string))": {
            "details": "See {IHATVault-VaultInitParams} for more detailsCalled when the vault is created in {IHATVaultsRegistry-createVault}",
            "params": {
              "_params": "The vault initialization parameters"
            }
          },
          "maxDeposit(address)": {
            "details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
          },
          "maxMint(address)": {
            "details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
          },
          "maxRedeem(address)": {
            "details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
          },
          "maxWithdraw(address)": {
            "details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
          },
          "mint(uint256,address)": {
            "details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "previewDeposit(uint256)": {
            "details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
          },
          "previewMint(uint256)": {
            "details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
          },
          "previewRedeem(uint256)": {
            "details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
          },
          "previewRedeemAndFee(uint256)": {
            "returns": {
              "assets": "amount of assets to be sent in exchange for the amount of shares specified",
              "fee": "The amount of assets that will be paid as fee"
            }
          },
          "previewWithdraw(uint256)": {
            "details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
          },
          "previewWithdrawAndFee(uint256)": {
            "returns": {
              "fee": "The amount of assets that will be paid as fee",
              "shares": "The amount of shares to be burned to get the requested amount of assets"
            }
          },
          "redeem(uint256,address,address)": {
            "details": "See {IERC4626-redeem}.",
            "params": {
              "owner": "Address of owner of the funds ",
              "receiver": "Address of receiver of the funds ",
              "shares": "Amount of shares to redeem"
            }
          },
          "redeemAndClaim(uint256,address,address)": {
            "details": "See {IERC4626-redeem}.",
            "params": {
              "owner": "Address of owner of the funds ",
              "receiver": "Address of receiver of the funds ",
              "shares": "Amount of shares to redeem"
            }
          },
          "rewardControllerRemoved(address)": {
            "params": {
              "_rewardController": "the reward controller to check"
            },
            "returns": {
              "_0": "bool Whether the reward contoller was previously used in the vault and removed"
            }
          },
          "setArbitrator(address)": {
            "params": {
              "_arbitrator": "The address of vault's arbitrator"
            }
          },
          "setArbitratorCanChangeBounty(uint8)": {
            "params": {
              "_arbitratorCanChangeBounty": "Whether the arbitrator can change a claim bounty percentage"
            }
          },
          "setBountySplit((uint256,uint256,uint256))": {
            "params": {
              "_bountySplit": "The bounty split"
            }
          },
          "setChallengePeriod(uint256)": {
            "params": {
              "_challengePeriod": "The vault's challenge period"
            }
          },
          "setChallengeTimeOutPeriod(uint256)": {
            "params": {
              "_challengeTimeOutPeriod": "The vault's challenge timeout period"
            }
          },
          "setCommittee(address)": {
            "params": {
              "_committee": "The address of the new committee "
            }
          },
          "setDepositPause(bool)": {
            "params": {
              "_depositPause": "Are deposits paused"
            }
          },
          "setHATBountySplit(uint256,uint256)": {
            "params": {
              "_bountyGovernanceHAT": "The HAT bounty for governance",
              "_bountyHackerHATVested": "The HAT bounty vested for the hacker"
            }
          },
          "setPendingMaxBounty(uint256)": {
            "params": {
              "_maxBounty": "The maximum bounty percentage that can be paid out"
            }
          },
          "setRewardController(address)": {
            "params": {
              "_newRewardController": "The new reward controller"
            }
          },
          "setVaultDescription(string)": {
            "params": {
              "_descriptionHash": "the hash of the vault's description"
            }
          },
          "setVestingParams(uint256,uint256)": {
            "params": {
              "_duration": "Duration of the vesting period. Must be smaller than 120 days and bigger than `_periods`",
              "_periods": "Number of vesting periods. Cannot be 0."
            }
          },
          "setWithdrawalFee(uint256)": {
            "params": {
              "_fee": "The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`"
            }
          },
          "submitClaim(address,uint256,string)": {
            "params": {
              "_beneficiary": "The submitted claim's beneficiary",
              "_bountyPercentage": "The submitted claim's bug requested reward percentage"
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token."
          },
          "totalAssets()": {
            "details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
          },
          "totalSupply()": {
            "details": "Returns the amount of tokens in existence."
          },
          "transfer(address,uint256)": {
            "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
          },
          "transferFrom(address,address,uint256)": {
            "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
          },
          "withdraw(uint256,address,address)": {
            "details": "See {IERC4626-withdraw}.",
            "params": {
              "assets": "Amount of tokens to withdraw",
              "owner": "Address of owner of the funds ",
              "receiver": "Address of receiver of the funds "
            }
          },
          "withdrawAndClaim(uint256,address,address)": {
            "details": "See {IERC4626-withdraw}.",
            "params": {
              "assets": "Amount of tokens to withdraw",
              "owner": "Address of owner of the funds",
              "receiver": "Address of receiver of the funds"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "approveClaim(bytes32,uint256)": {
            "notice": "Approve a claim for a bounty submitted by a committee, and pay out bounty to hacker and committee. Also transfer to the  HATVaultsRegistry the part of the bounty that will be swapped to HAT  tokens. If the claim had been previously challenged, this is only callable by the arbitrator. Otherwise, callable by anyone after challengePeriod had passed."
          },
          "challengeClaim(bytes32)": {
            "notice": "Called by the arbitrator or governance to challenge a claim for a bounty payout that had been previously submitted by the committee. Can only be called during the challenge period after submission of the claim."
          },
          "committeeCheckIn()": {
            "notice": "Called by the vault's committee to claim it's role. Deposits are enabled only after committee check in."
          },
          "dismissClaim(bytes32)": {
            "notice": "Dismiss the active claim for bounty payout submitted by the committee. Called either by the arbitrator, or by anyone if the claim has timed out."
          },
          "emergencyWithdraw(address)": {
            "notice": "Redeem all of the user's shares in the vault for the respective amount of underlying assets without calling the reward controller, meaning user renounces their uncommited part of the reward. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout."
          },
          "getArbitrator()": {
            "notice": "Returns the address of the vault's arbitrator If no specific value for this vault has been set, the registry's default value will be returned."
          },
          "getBountyGovernanceHAT()": {
            "notice": "Returns the vault HAT bounty split part that goes to the governance If no specific value for this vault has been set, the registry's default value will be returned."
          },
          "getBountyHackerHATVested()": {
            "notice": "Returns the vault HAT bounty split part that is veested for the hacker If no specific value for this vault has been set, the registry's default value will be returned."
          },
          "getChallengePeriod()": {
            "notice": "Returns the period of time after a claim for a bounty payout has been submitted that it can be challenged by the arbitrator. If no specific value for this vault has been set, the registry's default value will be returned."
          },
          "getChallengeTimeOutPeriod()": {
            "notice": "Returns the period of time after which a claim for a bounty payout can be dismissed by anyone. If no specific value for this vault has been set, the registry's default value will be returned."
          },
          "initialize((address,uint256,uint256,uint256,(uint256,uint256,uint256),address,address,address,bool,string))": {
            "notice": "Initialize a vault instance"
          },
          "previewRedeemAndFee(uint256)": {
            "notice": "Returns the amount of assets to be sent to the user for the exact amount of shares to redeem. Also returns the amount assets to be paid as fee."
          },
          "previewWithdrawAndFee(uint256)": {
            "notice": "Returns the amount of shares to be burned to give the user the exact amount of assets requested plus cover for the fee. Also returns the amount assets to be paid as fee."
          },
          "redeem(uint256,address,address)": {
            "notice": "Redeem shares in the vault for the respective amount of underlying assets, without transferring the accumulated HAT reward. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout."
          },
          "redeemAndClaim(uint256,address,address)": {
            "notice": "Redeem shares in the vault for the respective amount of underlying assets and claim the HAT reward that the user has earned. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout."
          },
          "setArbitrator(address)": {
            "notice": "Called by the registry's owner to set the vault arbitrator If the value passed is the special \"null\" value the vault will use the registry's default value."
          },
          "setArbitratorCanChangeBounty(uint8)": {
            "notice": "Called by the registry's owner to set whether the arbitrator can change a claim bounty percentage If the value passed is the special \"null\" value the vault will use the registry's default value."
          },
          "setBountySplit((uint256,uint256,uint256))": {
            "notice": "Called by the vault's owner to set the vault token bounty split upon an approval. Can only be called if is no active claim and not during safety periods."
          },
          "setChallengePeriod(uint256)": {
            "notice": "Called by the registry's owner to set the period of time after a claim for a bounty payout has been submitted that it can be challenged by the arbitrator. If the value passed is the special \"null\" value the vault will use the registry's default value."
          },
          "setChallengeTimeOutPeriod(uint256)": {
            "notice": "Called by the registry's owner to set the period of time after which a claim for a bounty payout can be dismissed by anyone. If the value passed is the special \"null\" value the vault will use the registry's default value."
          },
          "setCommittee(address)": {
            "notice": "Set new committee address. Can be called by existing committee, or by the the vault's owner in the case that the committee hadn't checked in yet."
          },
          "setDepositPause(bool)": {
            "notice": "Called by the vault's owner to disable all deposits to the vault"
          },
          "setHATBountySplit(uint256,uint256)": {
            "notice": "Called by the registry's owner to set the vault HAT token bounty  split upon an approval. If the value passed is the special \"null\" value the vault will use the registry's default value."
          },
          "setMaxBounty()": {
            "notice": "Called by the vault's owner to set the vault's max bounty to the already pending max bounty. Cannot be called if there are active claims that have been submitted. Can only be called if there is a max bounty pending approval, and the time delay since setting the pending max bounty had passed."
          },
          "setPendingMaxBounty(uint256)": {
            "notice": "Called by the vault's owner to set a pending request for the maximum percentage of the vault that can be paid out as a bounty. Cannot be called if there is an active claim that has been submitted. Max bounty should be less than or equal to 90% (defined as 9000). The pending value can be set by the owner after the time delay (of  {HATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed."
          },
          "setRewardController(address)": {
            "notice": "Called by the registry's owner to set the vault's reward controller"
          },
          "setVaultDescription(string)": {
            "notice": "Called by the registry's owner to change the description of the vault in the Hats.finance UI"
          },
          "setVestingParams(uint256,uint256)": {
            "notice": "Called by the vault's owner to set the vesting params for the part of the bounty that the hacker gets vested in the vault's native token"
          },
          "setWithdrawalFee(uint256)": {
            "notice": "Called by the registry's fee setter to set the fee for  withdrawals from the vault."
          },
          "submitClaim(address,uint256,string)": {
            "notice": "Called by the committee to submit a claim for a bounty payout. This function should be called only on a safety period, when withdrawals are disabled, and while there's no other active claim. Cannot be called when the registry is in an emergency pause. Upon a call to this function by the committee the vault's withdrawals will be disabled until the claim is approved or dismissed. Also from the time of this call the arbitrator will have a period of  {HATVaultsRegistry.challengePeriod} to challenge the claim."
          },
          "withdraw(uint256,address,address)": {
            "notice": "Withdraw previously deposited funds from the vault, without transferring the accumulated HAT reward. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout."
          },
          "withdrawAndClaim(uint256,address,address)": {
            "notice": "Withdraw previously deposited funds from the vault and claim the HAT reward that the user has earned. Can only be performed if a withdraw request has been previously submitted, and the pending period had passed, and while the withdraw enabled timeout had not passed. Withdrawals are not permitted during safety periods or while there is an active claim for a bounty payout."
          },
          "withdrawRequest()": {
            "notice": "Submit a request to withdraw funds from the vault. The request will only be approved if there is no previous active withdraw request. The request will be pending for a period of {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod}, after which a withdraw will be possible for a duration of {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ensdomains/=node_modules/@ensdomains/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/interfaces/IHATVault.sol": "IHATVault"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interfaces/IHATVault.sol": {
        "keccak256": "0x39ef58e6b37e2ef32d8cf51f29b810f4925fcd261779ffbcc7b040ea2a42faae",
        "urls": [
          "bzz-raw://7bc7459e54a4fe3e79e14184098893f88c52ed4c47f52ebf04665bece9ebf237",
          "dweb:/ipfs/QmZNdrpZGpJgkBhbQmd1zkzZHnw15fBDeVDkK8tex5b6Vn"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IHATVaultsRegistry.sol": {
        "keccak256": "0x9500d5ca066f89ebccaf468dad591dca8bf8c7f6673767aa38185840999ed8ce",
        "urls": [
          "bzz-raw://17b4fb74dbf539612fbbfd3f4f26e59f56970608a2b10a9a8d54f7beae51bb7c",
          "dweb:/ipfs/QmY3hkcfrbAirsWNpsBHn8347Yq5TBm56n1bjWi5JLrj2o"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IRewardController.sol": {
        "keccak256": "0x8e7198df19e0036e6d09121b934fbd5f0df52a38a0bb0fd66cbcc3dfce03edf5",
        "urls": [
          "bzz-raw://c3cdb4bce2ba60445c091431bb6b8dfd1193ff90ce0247375d479f47c447aec6",
          "dweb:/ipfs/QmZiMFn9WjQEDQkL9uh9hegPSgJvNqdDgad7SpdjPeYt9M"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol": {
        "keccak256": "0x2e991b91bca58c198c3ecd905d281c5e9ae230f4f34f14835294d5fa2d478991",
        "urls": [
          "bzz-raw://2cbb3c9fba2ef72dd7a9226296cddcb764bef17d4d5b522c94818a8ee9a390a6",
          "dweb:/ipfs/QmdFhEFbcmzFba6hMN1xFakCzUCsPuRwtEvU2GTKQTxkae"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
        "keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
        "urls": [
          "bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
          "dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
        "keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
        "urls": [
          "bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d",
          "dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/interfaces/IHATVault.sol",
    "id": 5176,
    "exportedSymbols": {
      "IERC20": [
        13075
      ],
      "IERC20MetadataUpgradeable": [
        9695
      ],
      "IERC20Upgradeable": [
        9073
      ],
      "IERC4626Upgradeable": [
        8174
      ],
      "IHATVault": [
        5175
      ],
      "IHATVaultsRegistry": [
        5554
      ],
      "IRewardController": [
        5661
      ]
    },
    "nodeType": "SourceUnit",
    "src": "118:25558:6",
    "nodes": [
      {
        "id": 4677,
        "nodeType": "PragmaDirective",
        "src": "118:23:6",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".16"
        ]
      },
      {
        "id": 4678,
        "nodeType": "ImportDirective",
        "src": "143:34:6",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IHATVaultsRegistry.sol",
        "file": "./IHATVaultsRegistry.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5176,
        "sourceUnit": 5555,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4679,
        "nodeType": "ImportDirective",
        "src": "178:33:6",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRewardController.sol",
        "file": "./IRewardController.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5176,
        "sourceUnit": 5662,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4680,
        "nodeType": "ImportDirective",
        "src": "212:80:6",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5176,
        "sourceUnit": 8175,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4681,
        "nodeType": "ImportDirective",
        "src": "293:56:6",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5176,
        "sourceUnit": 13076,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 5175,
        "nodeType": "ContractDefinition",
        "src": "2347:23328:6",
        "nodes": [
          {
            "id": 4688,
            "nodeType": "EnumDefinition",
            "src": "2397:50:6",
            "nodes": [],
            "canonicalName": "IHATVault.ArbitratorCanChangeBounty",
            "members": [
              {
                "id": 4685,
                "name": "NO",
                "nameLocation": "2429:2:6",
                "nodeType": "EnumValue",
                "src": "2429:2:6"
              },
              {
                "id": 4686,
                "name": "YES",
                "nameLocation": "2433:3:6",
                "nodeType": "EnumValue",
                "src": "2433:3:6"
              },
              {
                "id": 4687,
                "name": "DEFAULT",
                "nameLocation": "2438:7:6",
                "nodeType": "EnumValue",
                "src": "2438:7:6"
              }
            ],
            "name": "ArbitratorCanChangeBounty",
            "nameLocation": "2402:25:6"
          },
          {
            "id": 4695,
            "nodeType": "StructDefinition",
            "src": "2682:304:6",
            "nodes": [],
            "canonicalName": "IHATVault.BountySplit",
            "members": [
              {
                "constant": false,
                "id": 4690,
                "mutability": "mutable",
                "name": "hackerVested",
                "nameLocation": "2795:12:6",
                "nodeType": "VariableDeclaration",
                "scope": 4695,
                "src": "2787:20:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4689,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2787:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4692,
                "mutability": "mutable",
                "name": "hacker",
                "nameLocation": "2898:6:6",
                "nodeType": "VariableDeclaration",
                "scope": 4695,
                "src": "2890:14:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4691,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2890:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4694,
                "mutability": "mutable",
                "name": "committee",
                "nameLocation": "2970:9:6",
                "nodeType": "VariableDeclaration",
                "scope": 4695,
                "src": "2962:17:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4693,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2962:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "BountySplit",
            "nameLocation": "2689:11:6",
            "scope": 5175,
            "visibility": "public"
          },
          {
            "id": 4706,
            "nodeType": "StructDefinition",
            "src": "3131:171:6",
            "nodes": [],
            "canonicalName": "IHATVault.ClaimBounty",
            "members": [
              {
                "constant": false,
                "id": 4697,
                "mutability": "mutable",
                "name": "hacker",
                "nameLocation": "3168:6:6",
                "nodeType": "VariableDeclaration",
                "scope": 4706,
                "src": "3160:14:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4696,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3160:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4699,
                "mutability": "mutable",
                "name": "hackerVested",
                "nameLocation": "3192:12:6",
                "nodeType": "VariableDeclaration",
                "scope": 4706,
                "src": "3184:20:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4698,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3184:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4701,
                "mutability": "mutable",
                "name": "committee",
                "nameLocation": "3222:9:6",
                "nodeType": "VariableDeclaration",
                "scope": 4706,
                "src": "3214:17:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4700,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3214:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4703,
                "mutability": "mutable",
                "name": "hackerHatVested",
                "nameLocation": "3249:15:6",
                "nodeType": "VariableDeclaration",
                "scope": 4706,
                "src": "3241:23:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4702,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3241:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4705,
                "mutability": "mutable",
                "name": "governanceHat",
                "nameLocation": "3282:13:6",
                "nodeType": "VariableDeclaration",
                "scope": 4706,
                "src": "3274:21:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4704,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "3274:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ClaimBounty",
            "nameLocation": "3138:11:6",
            "scope": 5175,
            "visibility": "public"
          },
          {
            "id": 4730,
            "nodeType": "StructDefinition",
            "src": "4285:336:6",
            "nodes": [],
            "canonicalName": "IHATVault.VaultInitParams",
            "members": [
              {
                "constant": false,
                "id": 4709,
                "mutability": "mutable",
                "name": "rewardController",
                "nameLocation": "4336:16:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4318:34:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IRewardController_$5661",
                  "typeString": "contract IRewardController"
                },
                "typeName": {
                  "id": 4708,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 4707,
                    "name": "IRewardController",
                    "nameLocations": [
                      "4318:17:6"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 5661,
                    "src": "4318:17:6"
                  },
                  "referencedDeclaration": 5661,
                  "src": "4318:17:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRewardController_$5661",
                    "typeString": "contract IRewardController"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4711,
                "mutability": "mutable",
                "name": "vestingDuration",
                "nameLocation": "4370:15:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4362:23:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4710,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4362:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4713,
                "mutability": "mutable",
                "name": "vestingPeriods",
                "nameLocation": "4403:14:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4395:22:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4712,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4395:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4715,
                "mutability": "mutable",
                "name": "maxBounty",
                "nameLocation": "4435:9:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4427:17:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4714,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4427:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4718,
                "mutability": "mutable",
                "name": "bountySplit",
                "nameLocation": "4476:11:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4454:33:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_BountySplit_$4695_storage_ptr",
                  "typeString": "struct IHATVault.BountySplit"
                },
                "typeName": {
                  "id": 4717,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 4716,
                    "name": "IHATVault.BountySplit",
                    "nameLocations": [
                      "4454:9:6",
                      "4464:11:6"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 4695,
                    "src": "4454:21:6"
                  },
                  "referencedDeclaration": 4695,
                  "src": "4454:21:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BountySplit_$4695_storage_ptr",
                    "typeString": "struct IHATVault.BountySplit"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4721,
                "mutability": "mutable",
                "name": "asset",
                "nameLocation": "4504:5:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4497:12:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IERC20_$13075",
                  "typeString": "contract IERC20"
                },
                "typeName": {
                  "id": 4720,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 4719,
                    "name": "IERC20",
                    "nameLocations": [
                      "4497:6:6"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 13075,
                    "src": "4497:6:6"
                  },
                  "referencedDeclaration": 13075,
                  "src": "4497:6:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$13075",
                    "typeString": "contract IERC20"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4723,
                "mutability": "mutable",
                "name": "owner",
                "nameLocation": "4527:5:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4519:13:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4722,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4519:7:6",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4725,
                "mutability": "mutable",
                "name": "committee",
                "nameLocation": "4550:9:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4542:17:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4724,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4542:7:6",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4727,
                "mutability": "mutable",
                "name": "isPaused",
                "nameLocation": "4574:8:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4569:13:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 4726,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "4569:4:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 4729,
                "mutability": "mutable",
                "name": "descriptionHash",
                "nameLocation": "4599:15:6",
                "nodeType": "VariableDeclaration",
                "scope": 4730,
                "src": "4592:22:6",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 4728,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "4592:6:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "VaultInitParams",
            "nameLocation": "4292:15:6",
            "scope": 5175,
            "visibility": "public"
          },
          {
            "id": 4732,
            "nodeType": "ErrorDefinition",
            "src": "4649:22:6",
            "nodes": [],
            "errorSelector": "01a0583a",
            "name": "OnlyCommittee",
            "nameLocation": "4655:13:6",
            "parameters": {
              "id": 4731,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4668:2:6"
            }
          },
          {
            "id": 4734,
            "nodeType": "ErrorDefinition",
            "src": "4703:26:6",
            "nodes": [],
            "errorSelector": "c50c0f99",
            "name": "ActiveClaimExists",
            "nameLocation": "4709:17:6",
            "parameters": {
              "id": 4733,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4726:2:6"
            }
          },
          {
            "id": 4736,
            "nodeType": "ErrorDefinition",
            "src": "4755:21:6",
            "nodes": [],
            "errorSelector": "b438726e",
            "name": "SafetyPeriod",
            "nameLocation": "4761:12:6",
            "parameters": {
              "id": 4735,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4773:2:6"
            }
          },
          {
            "id": 4738,
            "nodeType": "ErrorDefinition",
            "src": "4806:24:6",
            "nodes": [],
            "errorSelector": "b71c745b",
            "name": "NotSafetyPeriod",
            "nameLocation": "4812:15:6",
            "parameters": {
              "id": 4737,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4827:2:6"
            }
          },
          {
            "id": 4740,
            "nodeType": "ErrorDefinition",
            "src": "4890:44:6",
            "nodes": [],
            "errorSelector": "c83039db",
            "name": "BountyPercentageHigherThanMaxBounty",
            "nameLocation": "4896:35:6",
            "parameters": {
              "id": 4739,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4931:2:6"
            }
          },
          {
            "id": 4742,
            "nodeType": "ErrorDefinition",
            "src": "5008:62:6",
            "nodes": [],
            "errorSelector": "5f2d8d83",
            "name": "OnlyCallableByArbitratorOrAfterChallengeTimeOutPeriod",
            "nameLocation": "5014:53:6",
            "parameters": {
              "id": 4741,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5067:2:6"
            }
          },
          {
            "id": 4744,
            "nodeType": "ErrorDefinition",
            "src": "5105:28:6",
            "nodes": [],
            "errorSelector": "34286f66",
            "name": "NoActiveClaimExists",
            "nameLocation": "5111:19:6",
            "parameters": {
              "id": 4743,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5130:2:6"
            }
          },
          {
            "id": 4746,
            "nodeType": "ErrorDefinition",
            "src": "5191:27:6",
            "nodes": [],
            "errorSelector": "34529158",
            "name": "ClaimIdIsNotActive",
            "nameLocation": "5197:18:6",
            "parameters": {
              "id": 4745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5215:2:6"
            }
          },
          {
            "id": 4748,
            "nodeType": "ErrorDefinition",
            "src": "5250:25:6",
            "nodes": [],
            "errorSelector": "3244470d",
            "name": "NotEnoughFeePaid",
            "nameLocation": "5256:16:6",
            "parameters": {
              "id": 4747,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5272:2:6"
            }
          },
          {
            "id": 4750,
            "nodeType": "ErrorDefinition",
            "src": "5309:27:6",
            "nodes": [],
            "errorSelector": "6e41a168",
            "name": "NoPendingMaxBounty",
            "nameLocation": "5315:18:6",
            "parameters": {
              "id": 4749,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5333:2:6"
            }
          },
          {
            "id": 4752,
            "nodeType": "ErrorDefinition",
            "src": "5399:51:6",
            "nodes": [],
            "errorSelector": "5f33a466",
            "name": "DelayPeriodForSettingMaxBountyHadNotPassed",
            "nameLocation": "5405:42:6",
            "parameters": {
              "id": 4751,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5447:2:6"
            }
          },
          {
            "id": 4754,
            "nodeType": "ErrorDefinition",
            "src": "5491:34:6",
            "nodes": [],
            "errorSelector": "3b343aa5",
            "name": "CommitteeAlreadyCheckedIn",
            "nameLocation": "5497:25:6",
            "parameters": {
              "id": 4753,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5522:2:6"
            }
          },
          {
            "id": 4756,
            "nodeType": "ErrorDefinition",
            "src": "5586:51:6",
            "nodes": [],
            "errorSelector": "c7a89fed",
            "name": "TotalSplitPercentageShouldBeHundredPercent",
            "nameLocation": "5592:42:6",
            "parameters": {
              "id": 4755,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5634:2:6"
            }
          },
          {
            "id": 4758,
            "nodeType": "ErrorDefinition",
            "src": "5678:31:6",
            "nodes": [],
            "errorSelector": "d786c9ac",
            "name": "VestingDurationTooLong",
            "nameLocation": "5684:22:6",
            "parameters": {
              "id": 4757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5706:2:6"
            }
          },
          {
            "id": 4760,
            "nodeType": "ErrorDefinition",
            "src": "5752:35:6",
            "nodes": [],
            "errorSelector": "1f551143",
            "name": "VestingPeriodsCannotBeZero",
            "nameLocation": "5758:26:6",
            "parameters": {
              "id": 4759,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5784:2:6"
            }
          },
          {
            "id": 4762,
            "nodeType": "ErrorDefinition",
            "src": "5837:42:6",
            "nodes": [],
            "errorSelector": "5c15b0b9",
            "name": "VestingDurationSmallerThanPeriods",
            "nameLocation": "5843:33:6",
            "parameters": {
              "id": 4761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5876:2:6"
            }
          },
          {
            "id": 4764,
            "nodeType": "ErrorDefinition",
            "src": "5941:48:6",
            "nodes": [],
            "errorSelector": "3dfa47cb",
            "name": "MaxBountyCannotBeMoreThanMaxBountyLimit",
            "nameLocation": "5947:39:6",
            "parameters": {
              "id": 4763,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5986:2:6"
            }
          },
          {
            "id": 4766,
            "nodeType": "ErrorDefinition",
            "src": "6067:43:6",
            "nodes": [],
            "errorSelector": "ffcabff5",
            "name": "CommitteeBountyCannotBeMoreThanMax",
            "nameLocation": "6073:34:6",
            "parameters": {
              "id": 4765,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6107:2:6"
            }
          },
          {
            "id": 4768,
            "nodeType": "ErrorDefinition",
            "src": "6142:26:6",
            "nodes": [],
            "errorSelector": "d61d1ac7",
            "name": "OnlyRegistryOwner",
            "nameLocation": "6148:17:6",
            "parameters": {
              "id": 4767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6165:2:6"
            }
          },
          {
            "id": 4770,
            "nodeType": "ErrorDefinition",
            "src": "6196:22:6",
            "nodes": [],
            "errorSelector": "7155bb19",
            "name": "OnlyFeeSetter",
            "nameLocation": "6202:13:6",
            "parameters": {
              "id": 4769,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6215:2:6"
            }
          },
          {
            "id": 4772,
            "nodeType": "ErrorDefinition",
            "src": "6267:28:6",
            "nodes": [],
            "errorSelector": "69b91bc7",
            "name": "WithdrawalFeeTooBig",
            "nameLocation": "6273:19:6",
            "parameters": {
              "id": 4771,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6292:2:6"
            }
          },
          {
            "id": 4774,
            "nodeType": "ErrorDefinition",
            "src": "6347:42:6",
            "nodes": [],
            "errorSelector": "34abfa9a",
            "name": "SetSharesArraysMustHaveSameLength",
            "nameLocation": "6353:33:6",
            "parameters": {
              "id": 4773,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6386:2:6"
            }
          },
          {
            "id": 4776,
            "nodeType": "ErrorDefinition",
            "src": "6430:33:6",
            "nodes": [],
            "errorSelector": "c832f572",
            "name": "CommitteeNotCheckedInYet",
            "nameLocation": "6436:24:6",
            "parameters": {
              "id": 4775,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6460:2:6"
            }
          },
          {
            "id": 4778,
            "nodeType": "ErrorDefinition",
            "src": "6499:29:6",
            "nodes": [],
            "errorSelector": "61859bed",
            "name": "NotEnoughUserBalance",
            "nameLocation": "6505:20:6",
            "parameters": {
              "id": 4777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6525:2:6"
            }
          },
          {
            "id": 4780,
            "nodeType": "ErrorDefinition",
            "src": "6574:38:6",
            "nodes": [],
            "errorSelector": "623e87ba",
            "name": "OnlyArbitratorOrRegistryOwner",
            "nameLocation": "6580:29:6",
            "parameters": {
              "id": 4779,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6609:2:6"
            }
          },
          {
            "id": 4782,
            "nodeType": "ErrorDefinition",
            "src": "6691:63:6",
            "nodes": [],
            "errorSelector": "72bdb254",
            "name": "UnchallengedClaimCanOnlyBeApprovedAfterChallengePeriod",
            "nameLocation": "6697:54:6",
            "parameters": {
              "id": 4781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6751:2:6"
            }
          },
          {
            "id": 4784,
            "nodeType": "ErrorDefinition",
            "src": "6854:80:6",
            "nodes": [],
            "errorSelector": "15421c89",
            "name": "ChallengedClaimCanOnlyBeApprovedByArbitratorUntilChallengeTimeoutPeriod",
            "nameLocation": "6860:71:6",
            "parameters": {
              "id": 4783,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6931:2:6"
            }
          },
          {
            "id": 4786,
            "nodeType": "ErrorDefinition",
            "src": "6964:21:6",
            "nodes": [],
            "errorSelector": "82a49d9e",
            "name": "ClaimExpired",
            "nameLocation": "6970:12:6",
            "parameters": {
              "id": 4785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6982:2:6"
            }
          },
          {
            "id": 4788,
            "nodeType": "ErrorDefinition",
            "src": "7022:29:6",
            "nodes": [],
            "errorSelector": "f0c47708",
            "name": "ChallengePeriodEnded",
            "nameLocation": "7028:20:6",
            "parameters": {
              "id": 4787,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7048:2:6"
            }
          },
          {
            "id": 4790,
            "nodeType": "ErrorDefinition",
            "src": "7097:31:6",
            "nodes": [],
            "errorSelector": "85c345b0",
            "name": "ClaimAlreadyChallenged",
            "nameLocation": "7103:22:6",
            "parameters": {
              "id": 4789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7125:2:6"
            }
          },
          {
            "id": 4792,
            "nodeType": "ErrorDefinition",
            "src": "7168:33:6",
            "nodes": [],
            "errorSelector": "32c7ab43",
            "name": "OnlyCallableIfChallenged",
            "nameLocation": "7174:24:6",
            "parameters": {
              "id": 4791,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7198:2:6"
            }
          },
          {
            "id": 4794,
            "nodeType": "ErrorDefinition",
            "src": "7266:61:6",
            "nodes": [],
            "errorSelector": "144229c3",
            "name": "CannotTransferToAnotherUserWithActiveWithdrawRequest",
            "nameLocation": "7272:52:6",
            "parameters": {
              "id": 4793,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7324:2:6"
            }
          },
          {
            "id": 4796,
            "nodeType": "ErrorDefinition",
            "src": "7381:38:6",
            "nodes": [],
            "errorSelector": "3efc232c",
            "name": "WithdrawMustBeGreaterThanZero",
            "nameLocation": "7387:29:6",
            "parameters": {
              "id": 4795,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7416:2:6"
            }
          },
          {
            "id": 4798,
            "nodeType": "ErrorDefinition",
            "src": "7482:26:6",
            "nodes": [],
            "errorSelector": "4656425a",
            "name": "RedeemMoreThanMax",
            "nameLocation": "7488:17:6",
            "parameters": {
              "id": 4797,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7505:2:6"
            }
          },
          {
            "id": 4800,
            "nodeType": "ErrorDefinition",
            "src": "7552:31:6",
            "nodes": [],
            "errorSelector": "5ed08189",
            "name": "SystemInEmergencyPause",
            "nameLocation": "7558:22:6",
            "parameters": {
              "id": 4799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7580:2:6"
            }
          },
          {
            "id": 4802,
            "nodeType": "ErrorDefinition",
            "src": "7660:44:6",
            "nodes": [],
            "errorSelector": "51254c13",
            "name": "CannotSetToPerviousRewardController",
            "nameLocation": "7666:35:6",
            "parameters": {
              "id": 4801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7701:2:6"
            }
          },
          {
            "id": 4804,
            "nodeType": "ErrorDefinition",
            "src": "7764:27:6",
            "nodes": [],
            "errorSelector": "d11b25af",
            "name": "AmountCannotBeZero",
            "nameLocation": "7770:18:6",
            "parameters": {
              "id": 4803,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7788:2:6"
            }
          },
          {
            "id": 4806,
            "nodeType": "ErrorDefinition",
            "src": "7834:29:6",
            "nodes": [],
            "errorSelector": "dad89dca",
            "name": "CannotTransferToSelf",
            "nameLocation": "7840:20:6",
            "parameters": {
              "id": 4805,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7860:2:6"
            }
          },
          {
            "id": 4818,
            "nodeType": "EventDefinition",
            "src": "7874:200:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "74bacf5e8961b0e45e6d22a66fcc3de56c31e095386e2fd8dc43fde5c94bf790",
            "name": "SubmitClaim",
            "nameLocation": "7880:11:6",
            "parameters": {
              "id": 4817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4808,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "7917:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "7901:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4807,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7901:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4810,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_committee",
                  "nameLocation": "7951:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "7935:26:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4809,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7935:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4812,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "7987:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "7971:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4811,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7971:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4814,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountyPercentage",
                  "nameLocation": "8017:17:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "8009:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4813,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8009:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4816,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "8051:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4818,
                  "src": "8044:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4815,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8044:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7891:182:6"
            }
          },
          {
            "id": 4822,
            "nodeType": "EventDefinition",
            "src": "8079:47:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "18cee768ef1c2d81fe153ce96ec56a038f24630c2a125dc04aa06e7765457b56",
            "name": "ChallengeClaim",
            "nameLocation": "8085:14:6",
            "parameters": {
              "id": 4821,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4820,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "8116:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4822,
                  "src": "8100:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4819,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8100:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8099:26:6"
            }
          },
          {
            "id": 4837,
            "nodeType": "EventDefinition",
            "src": "8131:230:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "4b22b0551b79e42d81d17d0700b5c56d1795c55d10922476f69ada51e794a5e9",
            "name": "ApproveClaim",
            "nameLocation": "8137:12:6",
            "parameters": {
              "id": 4836,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4824,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "8175:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4837,
                  "src": "8159:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4823,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8159:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4826,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_committee",
                  "nameLocation": "8209:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4837,
                  "src": "8193:26:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4825,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8193:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4828,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "8245:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4837,
                  "src": "8229:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4827,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8229:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4830,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountyPercentage",
                  "nameLocation": "8275:17:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4837,
                  "src": "8267:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4829,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8267:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4832,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_tokenLock",
                  "nameLocation": "8310:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4837,
                  "src": "8302:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4831,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8302:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4835,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_claimBounty",
                  "nameLocation": "8342:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4837,
                  "src": "8330:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimBounty_$4706_memory_ptr",
                    "typeString": "struct IHATVault.ClaimBounty"
                  },
                  "typeName": {
                    "id": 4834,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4833,
                      "name": "ClaimBounty",
                      "nameLocations": [
                        "8330:11:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4706,
                      "src": "8330:11:6"
                    },
                    "referencedDeclaration": 4706,
                    "src": "8330:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimBounty_$4706_storage_ptr",
                      "typeString": "struct IHATVault.ClaimBounty"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8149:211:6"
            }
          },
          {
            "id": 4841,
            "nodeType": "EventDefinition",
            "src": "8366:45:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "940c35077c5ad047271f088696e713b44c4776cc8fa7665b0e81a421c91ec129",
            "name": "DismissClaim",
            "nameLocation": "8372:12:6",
            "parameters": {
              "id": 4840,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4839,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "8401:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4841,
                  "src": "8385:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4838,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8385:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8384:26:6"
            }
          },
          {
            "id": 4845,
            "nodeType": "EventDefinition",
            "src": "8416:47:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "22a3400c609e52ea781540daed872a0ff7b79a428f634be082c24c2faf068463",
            "name": "SetCommittee",
            "nameLocation": "8422:12:6",
            "parameters": {
              "id": 4844,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4843,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_committee",
                  "nameLocation": "8451:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4845,
                  "src": "8435:26:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4842,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8435:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8434:28:6"
            }
          },
          {
            "id": 4851,
            "nodeType": "EventDefinition",
            "src": "8468:82:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "509e2b99f648e75d75a54861aa7c1d4c011b4f62cb29c9f065712732e91f965c",
            "name": "SetVestingParams",
            "nameLocation": "8474:16:6",
            "parameters": {
              "id": 4850,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4847,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_duration",
                  "nameLocation": "8508:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4851,
                  "src": "8500:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4846,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8500:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4849,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_periods",
                  "nameLocation": "8535:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4851,
                  "src": "8527:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4848,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8527:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8490:59:6"
            }
          },
          {
            "id": 4856,
            "nodeType": "EventDefinition",
            "src": "8555:47:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "ce6cd6536e3935e94142325538fe79a5a027df1ea426892bdc1b424a7b09cce9",
            "name": "SetBountySplit",
            "nameLocation": "8561:14:6",
            "parameters": {
              "id": 4855,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4854,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountySplit",
                  "nameLocation": "8588:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4856,
                  "src": "8576:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BountySplit_$4695_memory_ptr",
                    "typeString": "struct IHATVault.BountySplit"
                  },
                  "typeName": {
                    "id": 4853,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4852,
                      "name": "BountySplit",
                      "nameLocations": [
                        "8576:11:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4695,
                      "src": "8576:11:6"
                    },
                    "referencedDeclaration": 4695,
                    "src": "8576:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BountySplit_$4695_storage_ptr",
                      "typeString": "struct IHATVault.BountySplit"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8575:26:6"
            }
          },
          {
            "id": 4860,
            "nodeType": "EventDefinition",
            "src": "8607:40:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "3aa4413905e8f015896ec5880bdde24088ccb19b578f9fcf6800354d5320d4af",
            "name": "SetWithdrawalFee",
            "nameLocation": "8613:16:6",
            "parameters": {
              "id": 4859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4858,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_newFee",
                  "nameLocation": "8638:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4860,
                  "src": "8630:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4857,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8630:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8629:17:6"
            }
          },
          {
            "id": 4862,
            "nodeType": "EventDefinition",
            "src": "8652:27:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "da94dc4b788057a35879928f9ba97261fdb3a4371ba4aa7a1e7e34fae93b4921",
            "name": "CommitteeCheckedIn",
            "nameLocation": "8658:18:6",
            "parameters": {
              "id": 4861,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8676:2:6"
            }
          },
          {
            "id": 4868,
            "nodeType": "EventDefinition",
            "src": "8684:66:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "74e20f0cc669cb4ec8e83d6520717edb871c01698635816747e7f76eeaa217ed",
            "name": "SetPendingMaxBounty",
            "nameLocation": "8690:19:6",
            "parameters": {
              "id": 4867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4864,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_maxBounty",
                  "nameLocation": "8718:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4868,
                  "src": "8710:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4863,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8710:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4866,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_timeStamp",
                  "nameLocation": "8738:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4868,
                  "src": "8730:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4865,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8730:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8709:40:6"
            }
          },
          {
            "id": 4872,
            "nodeType": "EventDefinition",
            "src": "8755:39:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "f3d8fc64f1ce0c8c9c7d0514708b8596de220e81860a8ceaf7c10737dcc3135a",
            "name": "SetMaxBounty",
            "nameLocation": "8761:12:6",
            "parameters": {
              "id": 4871,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4870,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_maxBounty",
                  "nameLocation": "8782:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4872,
                  "src": "8774:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4869,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8774:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8773:20:6"
            }
          },
          {
            "id": 4877,
            "nodeType": "EventDefinition",
            "src": "8799:74:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "06369d9752ae054ed57067b8fc5085615cbae5c52f23cfa482225d4c85cf1577",
            "name": "SetRewardController",
            "nameLocation": "8805:19:6",
            "parameters": {
              "id": 4876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4875,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_newRewardController",
                  "nameLocation": "8851:20:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4877,
                  "src": "8825:46:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRewardController_$5661",
                    "typeString": "contract IRewardController"
                  },
                  "typeName": {
                    "id": 4874,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4873,
                      "name": "IRewardController",
                      "nameLocations": [
                        "8825:17:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5661,
                      "src": "8825:17:6"
                    },
                    "referencedDeclaration": 5661,
                    "src": "8825:17:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRewardController_$5661",
                      "typeString": "contract IRewardController"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8824:48:6"
            }
          },
          {
            "id": 4881,
            "nodeType": "EventDefinition",
            "src": "8878:42:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "0653e29fcca730c396a6099e174293ae6bd435437a5de4f8c461f7b5dc9e58f2",
            "name": "SetDepositPause",
            "nameLocation": "8884:15:6",
            "parameters": {
              "id": 4880,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4879,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_depositPause",
                  "nameLocation": "8905:13:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4881,
                  "src": "8900:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4878,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8900:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8899:20:6"
            }
          },
          {
            "id": 4885,
            "nodeType": "EventDefinition",
            "src": "8925:51:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "f4c65ddb6aed78463fc27d79ccd85368bb0ecd80bd763b891a8b64ef41ac750b",
            "name": "SetVaultDescription",
            "nameLocation": "8931:19:6",
            "parameters": {
              "id": 4884,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4883,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "8958:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4885,
                  "src": "8951:23:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4882,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8951:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8950:25:6"
            }
          },
          {
            "id": 4891,
            "nodeType": "EventDefinition",
            "src": "8981:86:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "b76a01d39e1cd92db69e1fba6bbfdb5d5eaf198958bee0826162c3283ff78848",
            "name": "SetHATBountySplit",
            "nameLocation": "8987:17:6",
            "parameters": {
              "id": 4890,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4887,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountyGovernanceHAT",
                  "nameLocation": "9013:20:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4891,
                  "src": "9005:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4886,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9005:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4889,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountyHackerHATVested",
                  "nameLocation": "9043:22:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4891,
                  "src": "9035:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4888,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9035:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9004:62:6"
            }
          },
          {
            "id": 4895,
            "nodeType": "EventDefinition",
            "src": "9072:49:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "53910d8ecf7b5b828433963dea4325f13b37cbdbfd212f83cb73ec179a60e121",
            "name": "SetArbitrator",
            "nameLocation": "9078:13:6",
            "parameters": {
              "id": 4894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4893,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_arbitrator",
                  "nameLocation": "9108:11:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4895,
                  "src": "9092:27:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4892,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9092:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9091:29:6"
            }
          },
          {
            "id": 4899,
            "nodeType": "EventDefinition",
            "src": "9126:51:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "5024621f2175cab0e0a5ebc174679f1b57839cff38355e8b20ad16ef4ddb656b",
            "name": "SetChallengePeriod",
            "nameLocation": "9132:18:6",
            "parameters": {
              "id": 4898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4897,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_challengePeriod",
                  "nameLocation": "9159:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4899,
                  "src": "9151:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4896,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9151:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9150:26:6"
            }
          },
          {
            "id": 4903,
            "nodeType": "EventDefinition",
            "src": "9182:65:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "6e25891c35494d6a8dfde4ac9fd75a3c140431624a4af477a084736b09ed7afe",
            "name": "SetChallengeTimeOutPeriod",
            "nameLocation": "9188:25:6",
            "parameters": {
              "id": 4902,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4901,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_challengeTimeOutPeriod",
                  "nameLocation": "9222:23:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4903,
                  "src": "9214:31:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4900,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9214:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9213:33:6"
            }
          },
          {
            "id": 4908,
            "nodeType": "EventDefinition",
            "src": "9252:89:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "d7cb2841948eb09bee01cc782c1897111c723fd1c27026b478a73e6236f5601b",
            "name": "SetArbitratorCanChangeBounty",
            "nameLocation": "9258:28:6",
            "parameters": {
              "id": 4907,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4906,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_arbitratorCanChangeBounty",
                  "nameLocation": "9313:26:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4908,
                  "src": "9287:52:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ArbitratorCanChangeBounty_$4688",
                    "typeString": "enum IHATVault.ArbitratorCanChangeBounty"
                  },
                  "typeName": {
                    "id": 4905,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4904,
                      "name": "ArbitratorCanChangeBounty",
                      "nameLocations": [
                        "9287:25:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4688,
                      "src": "9287:25:6"
                    },
                    "referencedDeclaration": 4688,
                    "src": "9287:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ArbitratorCanChangeBounty_$4688",
                      "typeString": "enum IHATVault.ArbitratorCanChangeBounty"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9286:54:6"
            }
          },
          {
            "id": 4914,
            "nodeType": "EventDefinition",
            "src": "9346:103:6",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "17040713250ec5f668a1c39e7939900e78558350dbaff0ebef34268dfa8ea4ac",
            "name": "WithdrawRequest",
            "nameLocation": "9352:15:6",
            "parameters": {
              "id": 4913,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4910,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "9393:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4914,
                  "src": "9377:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4909,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9377:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4912,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_withdrawEnableTime",
                  "nameLocation": "9423:19:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4914,
                  "src": "9415:27:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4911,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9415:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9367:81:6"
            }
          },
          {
            "id": 4921,
            "nodeType": "FunctionDefinition",
            "src": "9709:61:6",
            "nodes": [],
            "documentation": {
              "id": 4915,
              "nodeType": "StructuredDocumentation",
              "src": "9455:249:6",
              "text": " @notice Initialize a vault instance\n @param _params The vault initialization parameters\n @dev See {IHATVault-VaultInitParams} for more details\n @dev Called when the vault is created in {IHATVaultsRegistry-createVault}"
            },
            "functionSelector": "7278410d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "9718:10:6",
            "parameters": {
              "id": 4919,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4918,
                  "mutability": "mutable",
                  "name": "_params",
                  "nameLocation": "9752:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4921,
                  "src": "9729:30:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_VaultInitParams_$4730_memory_ptr",
                    "typeString": "struct IHATVault.VaultInitParams"
                  },
                  "typeName": {
                    "id": 4917,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4916,
                      "name": "VaultInitParams",
                      "nameLocations": [
                        "9729:15:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4730,
                      "src": "9729:15:6"
                    },
                    "referencedDeclaration": 4730,
                    "src": "9729:15:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_VaultInitParams_$4730_storage_ptr",
                      "typeString": "struct IHATVault.VaultInitParams"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9728:32:6"
            },
            "returnParameters": {
              "id": 4920,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9769:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4933,
            "nodeType": "FunctionDefinition",
            "src": "10698:187:6",
            "nodes": [],
            "documentation": {
              "id": 4922,
              "nodeType": "StructuredDocumentation",
              "src": "9960:733:6",
              "text": " @notice Called by the committee to submit a claim for a bounty payout.\n This function should be called only on a safety period, when withdrawals\n are disabled, and while there's no other active claim. Cannot be called\n when the registry is in an emergency pause.\n Upon a call to this function by the committee the vault's withdrawals\n will be disabled until the claim is approved or dismissed. Also from the\n time of this call the arbitrator will have a period of \n {HATVaultsRegistry.challengePeriod} to challenge the claim.\n @param _beneficiary The submitted claim's beneficiary\n @param _bountyPercentage The submitted claim's bug requested reward percentage"
            },
            "functionSelector": "34dc3c66",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "submitClaim",
            "nameLocation": "10707:11:6",
            "parameters": {
              "id": 4929,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4924,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "10736:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4933,
                  "src": "10728:20:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4923,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10728:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4926,
                  "mutability": "mutable",
                  "name": "_bountyPercentage",
                  "nameLocation": "10767:17:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4933,
                  "src": "10759:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4925,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10759:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4928,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "10811:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4933,
                  "src": "10795:32:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4927,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "10795:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10718:115:6"
            },
            "returnParameters": {
              "id": 4932,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4931,
                  "mutability": "mutable",
                  "name": "claimId",
                  "nameLocation": "10876:7:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4933,
                  "src": "10868:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4930,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "10868:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10867:17:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4939,
            "nodeType": "FunctionDefinition",
            "src": "11188:51:6",
            "nodes": [],
            "documentation": {
              "id": 4934,
              "nodeType": "StructuredDocumentation",
              "src": "10895:288:6",
              "text": " @notice Called by the arbitrator or governance to challenge a claim for a bounty\n payout that had been previously submitted by the committee.\n Can only be called during the challenge period after submission of the\n claim.\n @param _claimId The claim ID"
            },
            "functionSelector": "04165db1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "challengeClaim",
            "nameLocation": "11197:14:6",
            "parameters": {
              "id": 4937,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4936,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "11220:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4939,
                  "src": "11212:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4935,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11212:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11211:18:6"
            },
            "returnParameters": {
              "id": 4938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11238:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4947,
            "nodeType": "FunctionDefinition",
            "src": "11870:84:6",
            "nodes": [],
            "documentation": {
              "id": 4940,
              "nodeType": "StructuredDocumentation",
              "src": "11245:620:6",
              "text": " @notice Approve a claim for a bounty submitted by a committee, and\n pay out bounty to hacker and committee. Also transfer to the \n HATVaultsRegistry the part of the bounty that will be swapped to HAT \n tokens.\n If the claim had been previously challenged, this is only callable by\n the arbitrator. Otherwise, callable by anyone after challengePeriod had\n passed.\n @param _claimId The claim ID\n @param _bountyPercentage The percentage of the vault's balance that will\n be sent as a bounty. This value will be ignored if the caller is not the\n arbitrator."
            },
            "functionSelector": "99ab34e0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approveClaim",
            "nameLocation": "11879:12:6",
            "parameters": {
              "id": 4945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4942,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "11900:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4947,
                  "src": "11892:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4941,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11892:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4944,
                  "mutability": "mutable",
                  "name": "_bountyPercentage",
                  "nameLocation": "11918:17:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4947,
                  "src": "11910:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4943,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11910:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11891:45:6"
            },
            "returnParameters": {
              "id": 4946,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11953:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4953,
            "nodeType": "FunctionDefinition",
            "src": "12181:49:6",
            "nodes": [],
            "documentation": {
              "id": 4948,
              "nodeType": "StructuredDocumentation",
              "src": "11960:216:6",
              "text": " @notice Dismiss the active claim for bounty payout submitted by the\n committee.\n Called either by the arbitrator, or by anyone if the claim has timed out.\n @param _claimId The claim ID"
            },
            "functionSelector": "d52d5ee7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "dismissClaim",
            "nameLocation": "12190:12:6",
            "parameters": {
              "id": 4951,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4950,
                  "mutability": "mutable",
                  "name": "_claimId",
                  "nameLocation": "12211:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4953,
                  "src": "12203:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4949,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12203:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12202:18:6"
            },
            "returnParameters": {
              "id": 4952,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12229:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4959,
            "nodeType": "FunctionDefinition",
            "src": "12665:51:6",
            "nodes": [],
            "documentation": {
              "id": 4954,
              "nodeType": "StructuredDocumentation",
              "src": "12420:240:6",
              "text": " @notice Set new committee address. Can be called by existing committee,\n or by the the vault's owner in the case that the committee hadn't checked in\n yet.\n @param _committee The address of the new committee "
            },
            "functionSelector": "bddae40e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setCommittee",
            "nameLocation": "12674:12:6",
            "parameters": {
              "id": 4957,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4956,
                  "mutability": "mutable",
                  "name": "_committee",
                  "nameLocation": "12695:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4959,
                  "src": "12687:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4955,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12687:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12686:20:6"
            },
            "returnParameters": {
              "id": 4958,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12715:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4967,
            "nodeType": "FunctionDefinition",
            "src": "13080:72:6",
            "nodes": [],
            "documentation": {
              "id": 4960,
              "nodeType": "StructuredDocumentation",
              "src": "12722:353:6",
              "text": " @notice Called by the vault's owner to set the vesting params for the\n part of the bounty that the hacker gets vested in the vault's native\n token\n @param _duration Duration of the vesting period. Must be smaller than\n 120 days and bigger than `_periods`\n @param _periods Number of vesting periods. Cannot be 0."
            },
            "functionSelector": "eb658878",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setVestingParams",
            "nameLocation": "13089:16:6",
            "parameters": {
              "id": 4965,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4962,
                  "mutability": "mutable",
                  "name": "_duration",
                  "nameLocation": "13114:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4967,
                  "src": "13106:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4961,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13106:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4964,
                  "mutability": "mutable",
                  "name": "_periods",
                  "nameLocation": "13133:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4967,
                  "src": "13125:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4963,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13125:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13105:37:6"
            },
            "returnParameters": {
              "id": 4966,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13151:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4974,
            "nodeType": "FunctionDefinition",
            "src": "13396:66:6",
            "nodes": [],
            "documentation": {
              "id": 4968,
              "nodeType": "StructuredDocumentation",
              "src": "13158:233:6",
              "text": " @notice Called by the vault's owner to set the vault token bounty split\n upon an approval.\n Can only be called if is no active claim and not during safety periods.\n @param _bountySplit The bounty split"
            },
            "functionSelector": "b5ff6d57",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setBountySplit",
            "nameLocation": "13405:14:6",
            "parameters": {
              "id": 4972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4971,
                  "mutability": "mutable",
                  "name": "_bountySplit",
                  "nameLocation": "13439:12:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4974,
                  "src": "13420:31:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BountySplit_$4695_memory_ptr",
                    "typeString": "struct IHATVault.BountySplit"
                  },
                  "typeName": {
                    "id": 4970,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4969,
                      "name": "BountySplit",
                      "nameLocations": [
                        "13420:11:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4695,
                      "src": "13420:11:6"
                    },
                    "referencedDeclaration": 4695,
                    "src": "13420:11:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BountySplit_$4695_storage_ptr",
                      "typeString": "struct IHATVault.BountySplit"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13419:33:6"
            },
            "returnParameters": {
              "id": 4973,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13461:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4980,
            "nodeType": "FunctionDefinition",
            "src": "13672:49:6",
            "nodes": [],
            "documentation": {
              "id": 4975,
              "nodeType": "StructuredDocumentation",
              "src": "13468:199:6",
              "text": " @notice Called by the registry's fee setter to set the fee for \n withdrawals from the vault.\n @param _fee The new fee. Must be smaller than or equal to `MAX_WITHDRAWAL_FEE`"
            },
            "functionSelector": "ac1e5025",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWithdrawalFee",
            "nameLocation": "13681:16:6",
            "parameters": {
              "id": 4978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4977,
                  "mutability": "mutable",
                  "name": "_fee",
                  "nameLocation": "13706:4:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4980,
                  "src": "13698:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4976,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13698:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13697:14:6"
            },
            "returnParameters": {
              "id": 4979,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13720:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4984,
            "nodeType": "FunctionDefinition",
            "src": "13866:37:6",
            "nodes": [],
            "documentation": {
              "id": 4981,
              "nodeType": "StructuredDocumentation",
              "src": "13727:134:6",
              "text": " @notice Called by the vault's committee to claim it's role.\n Deposits are enabled only after committee check in."
            },
            "functionSelector": "a397a635",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "committeeCheckIn",
            "nameLocation": "13875:16:6",
            "parameters": {
              "id": 4982,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13891:2:6"
            },
            "returnParameters": {
              "id": 4983,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13902:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4990,
            "nodeType": "FunctionDefinition",
            "src": "14443:58:6",
            "nodes": [],
            "documentation": {
              "id": 4985,
              "nodeType": "StructuredDocumentation",
              "src": "13909:529:6",
              "text": " @notice Called by the vault's owner to set a pending request for the\n maximum percentage of the vault that can be paid out as a bounty.\n Cannot be called if there is an active claim that has been submitted.\n Max bounty should be less than or equal to 90% (defined as 9000).\n The pending value can be set by the owner after the time delay (of \n {HATVaultsRegistry.generalParameters.setMaxBountyDelay}) had passed.\n @param _maxBounty The maximum bounty percentage that can be paid out"
            },
            "functionSelector": "a5aef6e1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setPendingMaxBounty",
            "nameLocation": "14452:19:6",
            "parameters": {
              "id": 4988,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4987,
                  "mutability": "mutable",
                  "name": "_maxBounty",
                  "nameLocation": "14480:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 4990,
                  "src": "14472:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4986,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14472:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14471:20:6"
            },
            "returnParameters": {
              "id": 4989,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14500:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4994,
            "nodeType": "FunctionDefinition",
            "src": "14853:33:6",
            "nodes": [],
            "documentation": {
              "id": 4991,
              "nodeType": "StructuredDocumentation",
              "src": "14507:341:6",
              "text": " @notice Called by the vault's owner to set the vault's max bounty to\n the already pending max bounty.\n Cannot be called if there are active claims that have been submitted.\n Can only be called if there is a max bounty pending approval, and the\n time delay since setting the pending max bounty had passed."
            },
            "functionSelector": "f10284c6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMaxBounty",
            "nameLocation": "14862:12:6",
            "parameters": {
              "id": 4992,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14874:2:6"
            },
            "returnParameters": {
              "id": 4993,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14885:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5000,
            "nodeType": "FunctionDefinition",
            "src": "15033:54:6",
            "nodes": [],
            "documentation": {
              "id": 4995,
              "nodeType": "StructuredDocumentation",
              "src": "14892:136:6",
              "text": " @notice Called by the vault's owner to disable all deposits to the vault\n @param _depositPause Are deposits paused"
            },
            "functionSelector": "86d192e5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDepositPause",
            "nameLocation": "15042:15:6",
            "parameters": {
              "id": 4998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4997,
                  "mutability": "mutable",
                  "name": "_depositPause",
                  "nameLocation": "15063:13:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5000,
                  "src": "15058:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4996,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "15058:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15057:20:6"
            },
            "returnParameters": {
              "id": 4999,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15086:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5006,
            "nodeType": "FunctionDefinition",
            "src": "15287:70:6",
            "nodes": [],
            "documentation": {
              "id": 5001,
              "nodeType": "StructuredDocumentation",
              "src": "15093:189:6",
              "text": " @notice Called by the registry's owner to change the description of the\n vault in the Hats.finance UI\n @param _descriptionHash the hash of the vault's description"
            },
            "functionSelector": "a417e00c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setVaultDescription",
            "nameLocation": "15296:19:6",
            "parameters": {
              "id": 5004,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5003,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "15330:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5006,
                  "src": "15316:30:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 5002,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "15316:6:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15315:32:6"
            },
            "returnParameters": {
              "id": 5005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15356:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5013,
            "nodeType": "FunctionDefinition",
            "src": "15520:78:6",
            "nodes": [],
            "documentation": {
              "id": 5007,
              "nodeType": "StructuredDocumentation",
              "src": "15363:152:6",
              "text": " @notice Called by the registry's owner to set the vault's reward controller\n @param _newRewardController The new reward controller"
            },
            "functionSelector": "7c993961",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRewardController",
            "nameLocation": "15529:19:6",
            "parameters": {
              "id": 5011,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5010,
                  "mutability": "mutable",
                  "name": "_newRewardController",
                  "nameLocation": "15567:20:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5013,
                  "src": "15549:38:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRewardController_$5661",
                    "typeString": "contract IRewardController"
                  },
                  "typeName": {
                    "id": 5009,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5008,
                      "name": "IRewardController",
                      "nameLocations": [
                        "15549:17:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5661,
                      "src": "15549:17:6"
                    },
                    "referencedDeclaration": 5661,
                    "src": "15549:17:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRewardController_$5661",
                      "typeString": "contract IRewardController"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15548:40:6"
            },
            "returnParameters": {
              "id": 5012,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15597:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5021,
            "nodeType": "FunctionDefinition",
            "src": "15975:129:6",
            "nodes": [],
            "documentation": {
              "id": 5014,
              "nodeType": "StructuredDocumentation",
              "src": "15604:366:6",
              "text": " @notice Called by the registry's owner to set the vault HAT token bounty \n split upon an approval.\n If the value passed is the special \"null\" value the vault will use the\n registry's default value.\n @param _bountyGovernanceHAT The HAT bounty for governance\n @param _bountyHackerHATVested The HAT bounty vested for the hacker"
            },
            "functionSelector": "21462162",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setHATBountySplit",
            "nameLocation": "15984:17:6",
            "parameters": {
              "id": 5019,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5016,
                  "mutability": "mutable",
                  "name": "_bountyGovernanceHAT",
                  "nameLocation": "16019:20:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5021,
                  "src": "16011:28:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5015,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16011:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5018,
                  "mutability": "mutable",
                  "name": "_bountyHackerHATVested",
                  "nameLocation": "16057:22:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5021,
                  "src": "16049:30:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5017,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16049:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16001:84:6"
            },
            "returnParameters": {
              "id": 5020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16103:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5027,
            "nodeType": "FunctionDefinition",
            "src": "16366:53:6",
            "nodes": [],
            "documentation": {
              "id": 5022,
              "nodeType": "StructuredDocumentation",
              "src": "16110:251:6",
              "text": " @notice Called by the registry's owner to set the vault arbitrator\n If the value passed is the special \"null\" value the vault will use the\n registry's default value.\n @param _arbitrator The address of vault's arbitrator"
            },
            "functionSelector": "b0eefabe",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setArbitrator",
            "nameLocation": "16375:13:6",
            "parameters": {
              "id": 5025,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5024,
                  "mutability": "mutable",
                  "name": "_arbitrator",
                  "nameLocation": "16397:11:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5027,
                  "src": "16389:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5023,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16389:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16388:21:6"
            },
            "returnParameters": {
              "id": 5026,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16418:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5033,
            "nodeType": "FunctionDefinition",
            "src": "16789:63:6",
            "nodes": [],
            "documentation": {
              "id": 5028,
              "nodeType": "StructuredDocumentation",
              "src": "16425:359:6",
              "text": " @notice Called by the registry's owner to set the period of time after\n a claim for a bounty payout has been submitted that it can be challenged\n by the arbitrator.\n If the value passed is the special \"null\" value the vault will use the\n registry's default value.\n @param _challengePeriod The vault's challenge period"
            },
            "functionSelector": "5d475fdd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setChallengePeriod",
            "nameLocation": "16798:18:6",
            "parameters": {
              "id": 5031,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5030,
                  "mutability": "mutable",
                  "name": "_challengePeriod",
                  "nameLocation": "16825:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5033,
                  "src": "16817:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5029,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16817:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16816:26:6"
            },
            "returnParameters": {
              "id": 5032,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16851:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5039,
            "nodeType": "FunctionDefinition",
            "src": "17201:85:6",
            "nodes": [],
            "documentation": {
              "id": 5034,
              "nodeType": "StructuredDocumentation",
              "src": "16858:338:6",
              "text": " @notice Called by the registry's owner to set the period of time after\n which a claim for a bounty payout can be dismissed by anyone.\n If the value passed is the special \"null\" value the vault will use the\n registry's default value.\n @param _challengeTimeOutPeriod The vault's challenge timeout period"
            },
            "functionSelector": "59673323",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setChallengeTimeOutPeriod",
            "nameLocation": "17210:25:6",
            "parameters": {
              "id": 5037,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5036,
                  "mutability": "mutable",
                  "name": "_challengeTimeOutPeriod",
                  "nameLocation": "17244:23:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5039,
                  "src": "17236:31:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5035,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17236:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17235:33:6"
            },
            "returnParameters": {
              "id": 5038,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17285:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5046,
            "nodeType": "FunctionDefinition",
            "src": "17634:101:6",
            "nodes": [],
            "documentation": {
              "id": 5040,
              "nodeType": "StructuredDocumentation",
              "src": "17292:337:6",
              "text": " @notice Called by the registry's owner to set whether the arbitrator\n can change a claim bounty percentage\n If the value passed is the special \"null\" value the vault will use the\n registry's default value.\n @param _arbitratorCanChangeBounty Whether the arbitrator can change a claim bounty percentage"
            },
            "functionSelector": "436b6c83",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setArbitratorCanChangeBounty",
            "nameLocation": "17643:28:6",
            "parameters": {
              "id": 5044,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5043,
                  "mutability": "mutable",
                  "name": "_arbitratorCanChangeBounty",
                  "nameLocation": "17698:26:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5046,
                  "src": "17672:52:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ArbitratorCanChangeBounty_$4688",
                    "typeString": "enum IHATVault.ArbitratorCanChangeBounty"
                  },
                  "typeName": {
                    "id": 5042,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5041,
                      "name": "ArbitratorCanChangeBounty",
                      "nameLocations": [
                        "17672:25:6"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4688,
                      "src": "17672:25:6"
                    },
                    "referencedDeclaration": 4688,
                    "src": "17672:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ArbitratorCanChangeBounty_$4688",
                      "typeString": "enum IHATVault.ArbitratorCanChangeBounty"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17671:54:6"
            },
            "returnParameters": {
              "id": 5045,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17734:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5050,
            "nodeType": "FunctionDefinition",
            "src": "18360:36:6",
            "nodes": [],
            "documentation": {
              "id": 5047,
              "nodeType": "StructuredDocumentation",
              "src": "17925:430:6",
              "text": " @notice Submit a request to withdraw funds from the vault.\n The request will only be approved if there is no previous active\n withdraw request.\n The request will be pending for a period of\n {HATVaultsRegistry.generalParameters.withdrawRequestPendingPeriod},\n after which a withdraw will be possible for a duration of\n {HATVaultsRegistry.generalParameters.withdrawRequestEnablePeriod}"
            },
            "functionSelector": "380e687a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawRequest",
            "nameLocation": "18369:15:6",
            "parameters": {
              "id": 5048,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18384:2:6"
            },
            "returnParameters": {
              "id": 5049,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "18395:0:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5062,
            "nodeType": "FunctionDefinition",
            "src": "19025:126:6",
            "nodes": [],
            "documentation": {
              "id": 5051,
              "nodeType": "StructuredDocumentation",
              "src": "18402:618:6",
              "text": " @notice Withdraw previously deposited funds from the vault and claim\n the HAT reward that the user has earned.\n Can only be performed if a withdraw request has been previously\n submitted, and the pending period had passed, and while the withdraw\n enabled timeout had not passed. Withdrawals are not permitted during\n safety periods or while there is an active claim for a bounty payout.\n @param assets Amount of tokens to withdraw\n @param receiver Address of receiver of the funds\n @param owner Address of owner of the funds\n @dev See {IERC4626-withdraw}."
            },
            "functionSelector": "d0855293",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawAndClaim",
            "nameLocation": "19034:16:6",
            "parameters": {
              "id": 5058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5053,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "19059:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5062,
                  "src": "19051:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5052,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19051:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5055,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "19075:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5062,
                  "src": "19067:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5054,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19067:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5057,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "19093:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5062,
                  "src": "19085:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5056,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19085:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19050:49:6"
            },
            "returnParameters": {
              "id": 5061,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5060,
                  "mutability": "mutable",
                  "name": "shares",
                  "nameLocation": "19143:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5062,
                  "src": "19135:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5059,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19135:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19134:16:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5074,
            "nodeType": "FunctionDefinition",
            "src": "19801:124:6",
            "nodes": [],
            "documentation": {
              "id": 5063,
              "nodeType": "StructuredDocumentation",
              "src": "19157:639:6",
              "text": " @notice Redeem shares in the vault for the respective amount\n of underlying assets and claim the HAT reward that the user has earned.\n Can only be performed if a withdraw request has been previously\n submitted, and the pending period had passed, and while the withdraw\n enabled timeout had not passed. Withdrawals are not permitted during\n safety periods or while there is an active claim for a bounty payout.\n @param shares Amount of shares to redeem\n @param receiver Address of receiver of the funds \n @param owner Address of owner of the funds \n @dev See {IERC4626-redeem}."
            },
            "functionSelector": "7901808b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "redeemAndClaim",
            "nameLocation": "19810:14:6",
            "parameters": {
              "id": 5070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5065,
                  "mutability": "mutable",
                  "name": "shares",
                  "nameLocation": "19833:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5074,
                  "src": "19825:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5064,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19825:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5067,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "19849:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5074,
                  "src": "19841:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5066,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19841:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5069,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "19867:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5074,
                  "src": "19859:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5068,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19859:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19824:49:6"
            },
            "returnParameters": {
              "id": 5073,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5072,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "19917:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5074,
                  "src": "19909:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5071,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19909:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19908:16:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5082,
            "nodeType": "FunctionDefinition",
            "src": "20516:79:6",
            "nodes": [],
            "documentation": {
              "id": 5075,
              "nodeType": "StructuredDocumentation",
              "src": "19931:580:6",
              "text": " @notice Redeem all of the user's shares in the vault for the respective amount\n of underlying assets without calling the reward controller, meaning user renounces\n their uncommited part of the reward.\n Can only be performed if a withdraw request has been previously\n submitted, and the pending period had passed, and while the withdraw\n enabled timeout had not passed. Withdrawals are not permitted during\n safety periods or while there is an active claim for a bounty payout.\n @param receiver Address of receiver of the funds "
            },
            "functionSelector": "6ff1c9bc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyWithdraw",
            "nameLocation": "20525:17:6",
            "parameters": {
              "id": 5078,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5077,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "20551:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5082,
                  "src": "20543:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5076,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20543:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "20542:18:6"
            },
            "returnParameters": {
              "id": 5081,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5080,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "20587:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5082,
                  "src": "20579:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5079,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20579:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "20578:16:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5094,
            "nodeType": "FunctionDefinition",
            "src": "21225:111:6",
            "nodes": [],
            "baseFunctions": [
              8145
            ],
            "documentation": {
              "id": 5083,
              "nodeType": "StructuredDocumentation",
              "src": "20601:619:6",
              "text": " @notice Withdraw previously deposited funds from the vault, without\n transferring the accumulated HAT reward.\n Can only be performed if a withdraw request has been previously\n submitted, and the pending period had passed, and while the withdraw\n enabled timeout had not passed. Withdrawals are not permitted during\n safety periods or while there is an active claim for a bounty payout.\n @param assets Amount of tokens to withdraw\n @param receiver Address of receiver of the funds \n @param owner Address of owner of the funds \n @dev See {IERC4626-withdraw}."
            },
            "functionSelector": "b460af94",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "21234:8:6",
            "parameters": {
              "id": 5090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5085,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "21251:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5094,
                  "src": "21243:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5084,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21243:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5087,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "21267:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5094,
                  "src": "21259:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5086,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21259:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5089,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "21285:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5094,
                  "src": "21277:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5088,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21277:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21242:49:6"
            },
            "returnParameters": {
              "id": 5093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5092,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5094,
                  "src": "21327:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5091,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21327:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21326:9:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5106,
            "nodeType": "FunctionDefinition",
            "src": "21985:110:6",
            "nodes": [],
            "baseFunctions": [
              8173
            ],
            "documentation": {
              "id": 5095,
              "nodeType": "StructuredDocumentation",
              "src": "21342:638:6",
              "text": " @notice Redeem shares in the vault for the respective amount\n of underlying assets, without transferring the accumulated HAT reward.\n Can only be performed if a withdraw request has been previously\n submitted, and the pending period had passed, and while the withdraw\n enabled timeout had not passed. Withdrawals are not permitted during\n safety periods or while there is an active claim for a bounty payout.\n @param shares Amount of shares to redeem\n @param receiver Address of receiver of the funds \n @param owner Address of owner of the funds \n @dev See {IERC4626-redeem}."
            },
            "functionSelector": "ba087652",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "redeem",
            "nameLocation": "21994:6:6",
            "parameters": {
              "id": 5102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5097,
                  "mutability": "mutable",
                  "name": "shares",
                  "nameLocation": "22009:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5106,
                  "src": "22001:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5096,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22001:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5099,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "22025:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5106,
                  "src": "22017:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5098,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22017:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5101,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "22043:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5106,
                  "src": "22035:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5100,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22035:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22000:49:6"
            },
            "returnParameters": {
              "id": 5105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5104,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5106,
                  "src": "22086:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5103,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22086:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22085:9:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5116,
            "nodeType": "FunctionDefinition",
            "src": "22447:95:6",
            "nodes": [],
            "baseFunctions": [
              8091
            ],
            "documentation": {
              "id": 5107,
              "nodeType": "StructuredDocumentation",
              "src": "22101:341:6",
              "text": " @dev Deposit funds to the vault. Can only be called if the committee had\n checked in and deposits are not paused, and the registry is not in an emergency pause.\n @param receiver Reciever of the shares from the deposit\n @param assets Amount of vault's native token to deposit\n @dev See {IERC4626-deposit}."
            },
            "functionSelector": "6e553f65",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nameLocation": "22456:7:6",
            "parameters": {
              "id": 5112,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5109,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "22472:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5116,
                  "src": "22464:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5108,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22464:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5111,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "22488:8:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5116,
                  "src": "22480:16:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5110,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22480:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22463:34:6"
            },
            "returnParameters": {
              "id": 5115,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5114,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5116,
                  "src": "22533:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5113,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22533:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22532:9:6"
            },
            "scope": 5175,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5124,
            "nodeType": "FunctionDefinition",
            "src": "22903:88:6",
            "nodes": [],
            "documentation": {
              "id": 5117,
              "nodeType": "StructuredDocumentation",
              "src": "22732:166:6",
              "text": " @param _rewardController the reward controller to check\n @return bool Whether the reward contoller was previously used in the vault and removed"
            },
            "functionSelector": "dc5ba607",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rewardControllerRemoved",
            "nameLocation": "22912:23:6",
            "parameters": {
              "id": 5120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5119,
                  "mutability": "mutable",
                  "name": "_rewardController",
                  "nameLocation": "22944:17:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5124,
                  "src": "22936:25:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5118,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "22936:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22935:27:6"
            },
            "returnParameters": {
              "id": 5123,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5122,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5124,
                  "src": "22985:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5121,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "22985:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22984:6:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5130,
            "nodeType": "FunctionDefinition",
            "src": "23280:65:6",
            "nodes": [],
            "documentation": {
              "id": 5125,
              "nodeType": "StructuredDocumentation",
              "src": "22997:278:6",
              "text": " @notice Returns the vault HAT bounty split part that goes to the governance\n If no specific value for this vault has been set, the registry's default\n value will be returned.\n @return The vault's HAT bounty split part that goes to the governance"
            },
            "functionSelector": "551bd417",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getBountyGovernanceHAT",
            "nameLocation": "23289:22:6",
            "parameters": {
              "id": 5126,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23311:2:6"
            },
            "returnParameters": {
              "id": 5129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5128,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5130,
                  "src": "23336:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5127,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "23336:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23335:9:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5136,
            "nodeType": "FunctionDefinition",
            "src": "23644:67:6",
            "nodes": [],
            "documentation": {
              "id": 5131,
              "nodeType": "StructuredDocumentation",
              "src": "23355:284:6",
              "text": " @notice Returns the vault HAT bounty split part that is veested for the hacker\n If no specific value for this vault has been set, the registry's default\n value will be returned.\n @return The vault's HAT bounty split part that is veested for the hacker"
            },
            "functionSelector": "fb45153e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getBountyHackerHATVested",
            "nameLocation": "23653:24:6",
            "parameters": {
              "id": 5132,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23677:2:6"
            },
            "returnParameters": {
              "id": 5135,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5134,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5136,
                  "src": "23702:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5133,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "23702:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23701:9:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5142,
            "nodeType": "FunctionDefinition",
            "src": "23954:56:6",
            "nodes": [],
            "documentation": {
              "id": 5137,
              "nodeType": "StructuredDocumentation",
              "src": "23717:232:6",
              "text": " @notice Returns the address of the vault's arbitrator\n If no specific value for this vault has been set, the registry's default\n value will be returned.\n @return The address of the vault's arbitrator"
            },
            "functionSelector": "0fceb746",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getArbitrator",
            "nameLocation": "23963:13:6",
            "parameters": {
              "id": 5138,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "23976:2:6"
            },
            "returnParameters": {
              "id": 5141,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5140,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5142,
                  "src": "24001:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5139,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "24001:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24000:9:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5148,
            "nodeType": "FunctionDefinition",
            "src": "24329:61:6",
            "nodes": [],
            "documentation": {
              "id": 5143,
              "nodeType": "StructuredDocumentation",
              "src": "24016:308:6",
              "text": " @notice Returns the period of time after a claim for a bounty payout has\n been submitted that it can be challenged by the arbitrator.\n If no specific value for this vault has been set, the registry's default\n value will be returned.\n @return The vault's challenge period"
            },
            "functionSelector": "7864b77d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getChallengePeriod",
            "nameLocation": "24338:18:6",
            "parameters": {
              "id": 5144,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24356:2:6"
            },
            "returnParameters": {
              "id": 5147,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5146,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5148,
                  "src": "24381:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5145,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24381:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24380:9:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5154,
            "nodeType": "FunctionDefinition",
            "src": "24687:68:6",
            "nodes": [],
            "documentation": {
              "id": 5149,
              "nodeType": "StructuredDocumentation",
              "src": "24396:286:6",
              "text": " @notice Returns the period of time after which a claim for a bounty\n payout can be dismissed by anyone.\n If no specific value for this vault has been set, the registry's default\n value will be returned.\n @return The vault's challenge timeout period"
            },
            "functionSelector": "6da9a3ec",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getChallengeTimeOutPeriod",
            "nameLocation": "24696:25:6",
            "parameters": {
              "id": 5150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24721:2:6"
            },
            "returnParameters": {
              "id": 5153,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5152,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5154,
                  "src": "24746:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5151,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "24746:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24745:9:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5164,
            "nodeType": "FunctionDefinition",
            "src": "25130:99:6",
            "nodes": [],
            "documentation": {
              "id": 5155,
              "nodeType": "StructuredDocumentation",
              "src": "24761:364:6",
              "text": " @notice Returns the amount of shares to be burned to give the user the exact\n amount of assets requested plus cover for the fee. Also returns the amount assets\n to be paid as fee.\n @return shares The amount of shares to be burned to get the requested amount of assets\n @return fee The amount of assets that will be paid as fee"
            },
            "functionSelector": "c9e55529",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "previewWithdrawAndFee",
            "nameLocation": "25139:21:6",
            "parameters": {
              "id": 5158,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5157,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "25169:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5164,
                  "src": "25161:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5156,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25161:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25160:16:6"
            },
            "returnParameters": {
              "id": 5163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5160,
                  "mutability": "mutable",
                  "name": "shares",
                  "nameLocation": "25208:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5164,
                  "src": "25200:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5159,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25200:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5162,
                  "mutability": "mutable",
                  "name": "fee",
                  "nameLocation": "25224:3:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5164,
                  "src": "25216:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5161,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25216:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25199:29:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5174,
            "nodeType": "FunctionDefinition",
            "src": "25576:97:6",
            "nodes": [],
            "documentation": {
              "id": 5165,
              "nodeType": "StructuredDocumentation",
              "src": "25236:335:6",
              "text": " @notice Returns the amount of assets to be sent to the user for the exact\n amount of shares to redeem. Also returns the amount assets to be paid as fee.\n @return assets amount of assets to be sent in exchange for the amount of shares specified\n @return fee The amount of assets that will be paid as fee"
            },
            "functionSelector": "f4d0fb99",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "previewRedeemAndFee",
            "nameLocation": "25585:19:6",
            "parameters": {
              "id": 5168,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5167,
                  "mutability": "mutable",
                  "name": "shares",
                  "nameLocation": "25613:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5174,
                  "src": "25605:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25605:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25604:16:6"
            },
            "returnParameters": {
              "id": 5173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5170,
                  "mutability": "mutable",
                  "name": "assets",
                  "nameLocation": "25652:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5174,
                  "src": "25644:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5169,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25644:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5172,
                  "mutability": "mutable",
                  "name": "fee",
                  "nameLocation": "25668:3:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 5174,
                  "src": "25660:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5171,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25660:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25643:29:6"
            },
            "scope": 5175,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4683,
              "name": "IERC4626Upgradeable",
              "nameLocations": [
                "2370:19:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8174,
              "src": "2370:19:6"
            },
            "id": 4684,
            "nodeType": "InheritanceSpecifier",
            "src": "2370:19:6"
          }
        ],
        "canonicalName": "IHATVault",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4682,
          "nodeType": "StructuredDocumentation",
          "src": "351:1995:6",
          "text": "@title Interface for Hats.finance Vaults\n @author Hats.finance\n @notice A HATVault holds the funds for a specific project's bug bounties.\n The HATVault can be deposited into in a permissionless maner using\n the vault’s native token. When a bug is submitted and approved, the bounty \n is paid out using the funds in the vault. Bounties are paid out as a\n percentage of the vault. The percentage is set according to the severity of\n the bug. Vaults have regular safety periods (typically for an hour twice a\n day) which are time for the committee to make decisions.\n In addition to the roles defined in the HATVaultsRegistry, every HATVault \n has the roles:\n Committee - The only address which can submit a claim for a bounty payout\n and set the maximum bounty.\n User - Anyone can deposit the vault's native token into the vault and \n recieve shares for it. Shares represent the user's relative part in the\n vault, and when a bounty is paid out, users lose part of their deposits\n (based on percentage paid), but keep their share of the vault.\n Users also receive rewards for their deposits, which can be claimed at any\n  time.\n To withdraw previously deposited tokens, a user must first send a withdraw\n request, and the withdrawal will be made available after a pending period.\n Withdrawals are not permitted during safety periods or while there is an \n active claim for a bounty payout.\n Bounties are payed out distributed between a few channels, and that \n distribution is set upon creation (the hacker gets part in direct transfer,\n part in vested reward and part in vested HAT token, part gets rewarded to\n the committee, part gets swapped to HAT token and burned and/or sent to Hats\n governance).\n NOTE: Vaults should not use tokens which do not guarantee that the amount\n specified is the amount transferred\n This project is open-source and can be found at:\n https://github.com/hats-finance/hats-contracts"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          5175,
          8174,
          9695,
          9073
        ],
        "name": "IHATVault",
        "nameLocation": "2357:9:6",
        "scope": 5176,
        "usedErrors": [
          4732,
          4734,
          4736,
          4738,
          4740,
          4742,
          4744,
          4746,
          4748,
          4750,
          4752,
          4754,
          4756,
          4758,
          4760,
          4762,
          4764,
          4766,
          4768,
          4770,
          4772,
          4774,
          4776,
          4778,
          4780,
          4782,
          4784,
          4786,
          4788,
          4790,
          4792,
          4794,
          4796,
          4798,
          4800,
          4802,
          4804,
          4806
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 6
}