{
  "abi": [
    {
      "inputs": [],
      "name": "AmountSwappedLessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountToSwapIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengePeriodTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengePeriodTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengeTimeOutPeriodTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengeTimeOutPeriodTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelayTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HatVestingDurationSmallerThanPeriods",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HatVestingDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HatVestingPeriodsCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFeePaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafetyPeriodTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalHatsSplitPercentageShouldBeUpToMaxHATSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawPeriodTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestEnabledPeriodTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestEnabledPeriodTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestPendingPeriodTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "LogClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "SetClaimFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_defaultArbitrator",
          "type": "address"
        }
      ],
      "name": "SetDefaultArbitrator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_defaultArbitratorCanChangeBounty",
          "type": "bool"
        }
      ],
      "name": "SetDefaultArbitratorCanChangeBounty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_defaultChallengePeriod",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultChallengePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_defaultChallengeTimeOutPeriod",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultChallengeTimeOutPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_defaultBountyGovernanceHAT",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_defaultBountyHackerHATVested",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultHATBountySplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isEmergencyPaused",
          "type": "bool"
        }
      ],
      "name": "SetEmergencyPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_feeSetter",
          "type": "address"
        }
      ],
      "name": "SetFeeSetter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_periods",
          "type": "uint256"
        }
      ],
      "name": "SetHatVestingParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "SetMaxBountyDelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_visible",
          "type": "bool"
        }
      ],
      "name": "SetVaultVisibility",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawRequestPendingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawRequestEnablePeriod",
          "type": "uint256"
        }
      ],
      "name": "SetWithdrawRequestParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_safetyPeriod",
          "type": "uint256"
        }
      ],
      "name": "SetWithdrawSafetyPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountSent",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenLock",
          "type": "address"
        }
      ],
      "name": "SwapAndSend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IRewardController",
          "name": "_rewardController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxBounty",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "hackerVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hacker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "committee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IHATVault.BountySplit",
          "name": "_bountySplit",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bountyVestingDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bountyVestingPeriods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isPaused",
          "type": "bool"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hacker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_hackersHatReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_governanceHatReward",
          "type": "uint256"
        }
      ],
      "name": "addTokensToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_committee",
          "type": "address"
        },
        {
          "internalType": "contract IRewardController",
          "name": "_rewardController",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBounty",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "hackerVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hacker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "committee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IHATVault.BountySplit",
          "name": "_bountySplit",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_bountyVestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bountyVestingPeriods",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isPaused",
          "type": "bool"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneralParameters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "hatVestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hatVestingPeriods",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawRequestEnablePeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawRequestPendingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setMaxBountyDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IHATVaultsRegistry.GeneralParameters",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_descriptionHash",
          "type": "string"
        }
      ],
      "name": "logClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setClaimFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultArbitrator",
          "type": "address"
        }
      ],
      "name": "setDefaultArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_defaultArbitratorCanChangeBounty",
          "type": "bool"
        }
      ],
      "name": "setDefaultArbitratorCanChangeBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultChallengePeriod",
          "type": "uint256"
        }
      ],
      "name": "setDefaultChallengePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultChallengeTimeOutPeriod",
          "type": "uint256"
        }
      ],
      "name": "setDefaultChallengeTimeOutPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultBountyGovernanceHAT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultBountyHackerHATVested",
          "type": "uint256"
        }
      ],
      "name": "setDefaultHATBountySplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isEmergencyPaused",
          "type": "bool"
        }
      ],
      "name": "setEmergencyPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeSetter",
          "type": "address"
        }
      ],
      "name": "setFeeSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_periods",
          "type": "uint256"
        }
      ],
      "name": "setHatVestingParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "setMaxBountyDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_visible",
          "type": "bool"
        }
      ],
      "name": "setVaultVisibility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawRequestPendingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawRequestEnablePeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawRequestParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safetyPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawSafetyPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_routingContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_routingPayload",
          "type": "bytes"
        }
      ],
      "name": "swapAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "validateChallengePeriod",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeTimeOutPeriod",
          "type": "uint256"
        }
      ],
      "name": "validateChallengeTimeOutPeriod",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bountyGovernanceHAT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bountyHackerHATVested",
          "type": "uint256"
        }
      ],
      "name": "validateHATSplit",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addTokensToSwap(address,address,uint256,uint256)": "5dd11415",
    "createVault(address,address,address,address,uint256,(uint256,uint256,uint256),string,uint256,uint256,bool)": "c99a02b0",
    "getGeneralParameters()": "2cc85f97",
    "getNumberOfVaults()": "d3e0bc56",
    "logClaim(string)": "e367497d",
    "setClaimFee(uint256)": "2e75ab50",
    "setDefaultArbitrator(address)": "a8acd946",
    "setDefaultArbitratorCanChangeBounty(bool)": "1b2cae6c",
    "setDefaultChallengePeriod(uint256)": "22f84ada",
    "setDefaultChallengeTimeOutPeriod(uint256)": "f836c449",
    "setDefaultHATBountySplit(uint256,uint256)": "132b1cc6",
    "setEmergencyPaused(bool)": "9d0ab89f",
    "setFeeSetter(address)": "b19805af",
    "setHatVestingParams(uint256,uint256)": "dd072f03",
    "setMaxBountyDelay(uint256)": "24cda22d",
    "setVaultVisibility(address,bool)": "aec1d108",
    "setWithdrawRequestParams(uint256,uint256)": "398488eb",
    "setWithdrawSafetyPeriod(uint256,uint256)": "520a924d",
    "swapAndSend(address,address[],uint256,address,bytes)": "e2b001bf",
    "validateChallengePeriod(uint256)": "ebf7830c",
    "validateChallengeTimeOutPeriod(uint256)": "2ac60b7d",
    "validateHATSplit(uint256,uint256)": "70cb13b5"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountSwappedLessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountToSwapIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengePeriodTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengePeriodTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengeTimeOutPeriodTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengeTimeOutPeriodTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HatVestingDurationSmallerThanPeriods\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HatVestingDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HatVestingPeriodsCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFeePaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafetyPeriodTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalHatsSplitPercentageShouldBeUpToMaxHATSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawPeriodTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestEnabledPeriodTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestEnabledPeriodTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestPendingPeriodTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetClaimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_defaultArbitrator\",\"type\":\"address\"}],\"name\":\"SetDefaultArbitrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_defaultArbitratorCanChangeBounty\",\"type\":\"bool\"}],\"name\":\"SetDefaultArbitratorCanChangeBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_defaultChallengePeriod\",\"type\":\"uint256\"}],\"name\":\"SetDefaultChallengePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_defaultChallengeTimeOutPeriod\",\"type\":\"uint256\"}],\"name\":\"SetDefaultChallengeTimeOutPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_defaultBountyGovernanceHAT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_defaultBountyHackerHATVested\",\"type\":\"uint256\"}],\"name\":\"SetDefaultHATBountySplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isEmergencyPaused\",\"type\":\"bool\"}],\"name\":\"SetEmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_feeSetter\",\"type\":\"address\"}],\"name\":\"SetFeeSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"SetHatVestingParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"SetMaxBountyDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_visible\",\"type\":\"bool\"}],\"name\":\"SetVaultVisibility\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawRequestPendingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawRequestEnablePeriod\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawRequestParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_safetyPeriod\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawSafetyPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSent\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenLock\",\"type\":\"address\"}],\"name\":\"SwapAndSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRewardController\",\"name\":\"_rewardController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBounty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hackerVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IHATVault.BountySplit\",\"name\":\"_bountySplit\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bountyVestingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bountyVestingPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hacker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hackersHatReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_governanceHatReward\",\"type\":\"uint256\"}],\"name\":\"addTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"},{\"internalType\":\"contract IRewardController\",\"name\":\"_rewardController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBounty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hackerVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committee\",\"type\":\"uint256\"}],\"internalType\":\"struct IHATVault.BountySplit\",\"name\":\"_bountySplit\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_bountyVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountyVestingPeriods\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hatVestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatVestingPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRequestEnablePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRequestPendingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setMaxBountyDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IHATVaultsRegistry.GeneralParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"logClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultArbitrator\",\"type\":\"address\"}],\"name\":\"setDefaultArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_defaultArbitratorCanChangeBounty\",\"type\":\"bool\"}],\"name\":\"setDefaultArbitratorCanChangeBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultChallengePeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultChallengePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultChallengeTimeOutPeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultChallengeTimeOutPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultBountyGovernanceHAT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultBountyHackerHATVested\",\"type\":\"uint256\"}],\"name\":\"setDefaultHATBountySplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEmergencyPaused\",\"type\":\"bool\"}],\"name\":\"setEmergencyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeSetter\",\"type\":\"address\"}],\"name\":\"setFeeSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"setHatVestingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxBountyDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_visible\",\"type\":\"bool\"}],\"name\":\"setVaultVisibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawRequestPendingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawRequestEnablePeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawRequestParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safetyPeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawSafetyPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routingContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_routingPayload\",\"type\":\"bytes\"}],\"name\":\"swapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"validateChallengePeriod\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeTimeOutPeriod\",\"type\":\"uint256\"}],\"name\":\"validateChallengeTimeOutPeriod\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bountyGovernanceHAT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountyHackerHATVested\",\"type\":\"uint256\"}],\"name\":\"validateHATSplit\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"hats.finance\",\"details\":\"New hats.finance vaults should be created through a call to {createVault} so that they are linked to the registry\",\"events\":{\"LogClaim(address,string)\":{\"params\":{\"_claimer\":\"The address of the claimer\",\"_descriptionHash\":\"- a hash of an ipfs encrypted file which describes the claim.\"}},\"SetClaimFee(uint256)\":{\"params\":{\"_fee\":\"Claim fee in ETH to be transferred on any call of {logClaim}\"}},\"SetDefaultArbitrator(address)\":{\"params\":{\"_defaultArbitrator\":\"The address of the new arbitrator\"}},\"SetDefaultArbitratorCanChangeBounty(bool)\":{\"params\":{\"_defaultArbitratorCanChangeBounty\":\"Whether the arbitrator can change bounty of claims\"}},\"SetDefaultChallengePeriod(uint256)\":{\"params\":{\"_defaultChallengePeriod\":\"The new default challenge period\"}},\"SetDefaultChallengeTimeOutPeriod(uint256)\":{\"params\":{\"_defaultChallengeTimeOutPeriod\":\"The new default challenge timeout period\"}},\"SetDefaultHATBountySplit(uint256,uint256)\":{\"params\":{\"_defaultBountyGovernanceHAT\":\"The new default HAT bounty part sent to governance\",\"_defaultBountyHackerHATVested\":\"The new default HAT bounty part vseted for the hacker\"}},\"SetEmergencyPaused(bool)\":{\"params\":{\"_isEmergencyPaused\":\"Is the system in an emergency pause\"}},\"SetFeeSetter(address)\":{\"params\":{\"_feeSetter\":\"The address of the new fee setter\"}},\"SetHatVestingParams(uint256,uint256)\":{\"params\":{\"_duration\":\"The duration of the vesting period\",\"_periods\":\"The number of vesting periods\"}},\"SetMaxBountyDelay(uint256)\":{\"params\":{\"_delay\":\"The time period for the delay\"}},\"SetVaultVisibility(address,bool)\":{\"params\":{\"_vault\":\"The address of the vault to update\",\"_visible\":\"Is this vault visible in the UI\"}},\"SetWithdrawRequestParams(uint256,uint256)\":{\"params\":{\"_withdrawRequestEnablePeriod\":\"Time period after the peding period has ended during which withdrawal is enabled\",\"_withdrawRequestPendingPeriod\":\"Time period where the withdraw request is pending\"}},\"SetWithdrawSafetyPeriod(uint256,uint256)\":{\"params\":{\"_safetyPeriod\":\"Amount of time during which claims for bounties  can be submitted and withdrawals are disabled\",\"_withdrawPeriod\":\"Amount of time during which withdrawals are enabled, and the bounty split can be changed by the governance\"}},\"SwapAndSend(address,uint256,uint256,address)\":{\"params\":{\"_amountSent\":\"Amount of HAT tokens sent to beneficiary\",\"_amountSwapped\":\"Amount of vault's native tokens that was swapped\",\"_beneficiary\":\"Address of beneficiary\",\"_tokenLock\":\"Address of the token lock contract that holds the HAT tokens (address(0) if no token lock is used)\"}},\"VaultCreated(address,address,address,address,uint256,(uint256,uint256,uint256),string,uint256,uint256,bool)\":{\"details\":\"Emitted when a new vault is created\",\"params\":{\"_asset\":\"The vault's native token\",\"_bountySplit\":\"The way to split the bounty between the hacker,  hacker vested, and committee.   Each entry is a number between 0 and 100%   Total splits should be equal to 100%\",\"_bountyVestingDuration\":\"The number of vesting periods\",\"_committee\":\"The address of the vault's committee \",\"_descriptionHash\":\"Hash of the vault description.\",\"_maxBounty\":\"The maximum percentage of the vault that can be paid out as a bounty. Must be between 0 and 100% (defined as 10000)\",\"_rewardController\":\"The reward controller for the vault\",\"_vault\":\"The address of the vault to add to the registry\"}}},\"kind\":\"dev\",\"methods\":{\"addTokensToSwap(address,address,uint256,uint256)\":{\"params\":{\"_asset\":\"The vault's native token\",\"_governanceHatReward\":\"The amount of the vault's native token to be swapped to HAT tokens and sent to governance\",\"_hacker\":\"The address of the beneficiary of the bounty\",\"_hackersHatReward\":\"The amount of the vault's native token to be swapped to HAT tokens and sent to the hacker via a vesting contract\"}},\"createVault(address,address,address,address,uint256,(uint256,uint256,uint256),string,uint256,uint256,bool)\":{\"params\":{\"_asset\":\"The vault's native token\",\"_bountySplit\":\"The way to split the bounty between the hacker,  hacker vested, and committee.   Each entry is a number between 0 and `HUNDRED_PERCENT`.   Total splits should be equal to `HUNDRED_PERCENT`.\",\"_bountyVestingDuration\":\"Vesting duration for the part of the bounty that is paid vested in the vault's native token\",\"_bountyVestingPeriods\":\"Vesting periods for the part of the bounty that is paid vested in the vault's native token\",\"_committee\":\"The address of the vault's committee \",\"_descriptionHash\":\"Hash of the vault description.\",\"_isPaused\":\"Whether to initialize the vault with deposits disabled\",\"_maxBounty\":\"The maximum percentage of the vault that can be paid out as a bounty. Must be between 0 and `HUNDRED_PERCENT`\",\"_rewardController\":\"The reward controller for the vault\"},\"returns\":{\"vault\":\"The address of the new vault\"}},\"getGeneralParameters()\":{\"returns\":{\"_0\":\"{GeneralParameters} General parameters for all vaults\"}},\"getNumberOfVaults()\":{\"returns\":{\"_0\":\"The number of vaults in the registry\"}},\"logClaim(string)\":{\"params\":{\"_descriptionHash\":\"- a hash of an IPFS encrypted file which  describes the claim.\"}},\"setClaimFee(uint256)\":{\"params\":{\"_fee\":\"Claim fee in ETH to be transferred on any call of {logClaim}\"}},\"setDefaultArbitrator(address)\":{\"params\":{\"_defaultArbitrator\":\"The default arbitrator address\"}},\"setDefaultArbitratorCanChangeBounty(bool)\":{\"params\":{\"_defaultArbitratorCanChangeBounty\":\"The default for whether the arbitrator can change bounty of claims\"}},\"setDefaultChallengePeriod(uint256)\":{\"params\":{\"_defaultChallengePeriod\":\"The default challenge period\"}},\"setDefaultChallengeTimeOutPeriod(uint256)\":{\"params\":{\"_defaultChallengeTimeOutPeriod\":\"The Default challenge timeout\"}},\"setDefaultHATBountySplit(uint256,uint256)\":{\"params\":{\"_defaultBountyGovernanceHAT\":\"The HAT bounty for governance\",\"_defaultBountyHackerHATVested\":\"The HAT bounty vested for the hacker\"}},\"setEmergencyPaused(bool)\":{\"params\":{\"_isEmergencyPaused\":\"Is the system in an emergency pause\"}},\"setFeeSetter(address)\":{\"params\":{\"_feeSetter\":\"Address of new fee setter\"}},\"setHatVestingParams(uint256,uint256)\":{\"params\":{\"_duration\":\"Duration of the vesting period. Must be less than 180 days.\",\"_periods\":\"The number of vesting periods. Must be more than 0 and  less then the vesting duration.\"}},\"setMaxBountyDelay(uint256)\":{\"params\":{\"_delay\":\"The time period for the delay. Must be at least 2 days.\"}},\"setVaultVisibility(address,bool)\":{\"params\":{\"_vault\":\"The address of the vault to update\",\"_visible\":\"Is this vault visible in the UI This parameter can be used by the UI to include or exclude the vault\"}},\"setWithdrawRequestParams(uint256,uint256)\":{\"params\":{\"_withdrawRequestEnablePeriod\":\"Time period after the peding period has ended during which withdrawal is enabled\",\"_withdrawRequestPendingPeriod\":\"Time period where the withdraw request is pending\"}},\"setWithdrawSafetyPeriod(uint256,uint256)\":{\"params\":{\"_safetyPeriod\":\"Amount of time during which claims for bounties  can be submitted and withdrawals are disabled. Must be at most 6 hours.\",\"_withdrawPeriod\":\"Amount of time during which withdrawals are enabled, and the bounty split can be changed by the governance. Must be at least 1 hour.\"}},\"swapAndSend(address,address[],uint256,address,bytes)\":{\"params\":{\"_amountOutMinimum\":\"Minimum amount of HAT tokens at swap\",\"_asset\":\"The address of the token to be swapped to HAT tokens\",\"_beneficiaries\":\"Addresses of beneficiaries\",\"_routingContract\":\"Routing contract to call for the swap\",\"_routingPayload\":\"Payload to send to the _routingContract for the swap\"}},\"validateChallengePeriod(uint256)\":{\"params\":{\"_challengePeriod\":\"The challenge period to check\"}},\"validateChallengeTimeOutPeriod(uint256)\":{\"params\":{\"_challengeTimeOutPeriod\":\"The challenge timeout period to check\"}},\"validateHATSplit(uint256,uint256)\":{\"details\":\"Check that a given hats bounty split is legal, meaning that:   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.   Total splits should be less than `MAX_HAT_SPLIT`. function will revert in case the bounty split is not legal.\",\"params\":{\"_bountyGovernanceHAT\":\"The HAT bounty for governance\",\"_bountyHackerHATVested\":\"The HAT bounty vested for the hacker\"}}},\"title\":\"Interface for the Hats.finance Vault Registry\",\"version\":1},\"userdoc\":{\"errors\":{\"AmountSwappedLessThanMinimum()\":[{\"notice\":\"Raised on {swapAndSend} if the amount that was recieved in the swap was less than the minimum amount specified\"}],\"AmountToSwapIsZero()\":[{\"notice\":\"Raised on {swapAndSend} if the amount to swap is zero\"}],\"ChallengePeriodTooLong()\":[{\"notice\":\"Raised on {setDefaultChallengePeriod} if the challenge period  to be set is longer than 5 days\"}],\"ChallengePeriodTooShort()\":[{\"notice\":\"Raised on {setDefaultChallengePeriod} if the challenge period  to be set is shorter than 1 day\"}],\"ChallengeTimeOutPeriodTooLong()\":[{\"notice\":\"Raised on {setDefaultChallengeTimeOutPeriod} if the challenge timeout period to be set is longer than 85 days\"}],\"ChallengeTimeOutPeriodTooShort()\":[{\"notice\":\"Raised on {setDefaultChallengeTimeOutPeriod} if the challenge timeout period to be set is shorter than 1 day\"}],\"DelayTooShort()\":[{\"notice\":\"Raised on {setMaxBountyDelay} if the max bounty to be set is shorter than 2 days\"}],\"HatVestingDurationSmallerThanPeriods()\":[{\"notice\":\"Raised on {setHatVestingParams} if the vesting duration is  smaller than the vesting periods\"}],\"HatVestingDurationTooLong()\":[{\"notice\":\"Raised on {setHatVestingParams} if the vesting duration to be set is longer than 180 days\"}],\"HatVestingPeriodsCannotBeZero()\":[{\"notice\":\"Raised on {setHatVestingParams} if the vesting periods to be set is 0\"}],\"NotEnoughFeePaid()\":[{\"notice\":\"Raised on {LogClaim} if the transaction was not sent with the amount of ETH specified as {generalParameters.claimFee}\"}],\"SafetyPeriodTooLong()\":[{\"notice\":\"Raised on {setWithdrawSafetyPeriod} if the safety period to be set is longer than 6 hours\"}],\"SwapFailed()\":[{\"notice\":\"Raised on {swapAndSend} if the swap was not successful\"}],\"TotalHatsSplitPercentageShouldBeUpToMaxHATSplit()\":[{\"notice\":\"Raised on {setDefaultHATBountySplit} if the split to be set is greater than 20% (defined as 2000)\"}],\"WithdrawPeriodTooShort()\":[{\"notice\":\"Raised on {setWithdrawSafetyPeriod} if the withdraw period to be set is shorter than 1 hour\"}],\"WithdrawRequestEnabledPeriodTooLong()\":[{\"notice\":\"Raised on {setWithdrawRequestParams} if the withdraw request enabled period to be set is longer than 100 days\"}],\"WithdrawRequestEnabledPeriodTooShort()\":[{\"notice\":\"Raised on {setWithdrawRequestParams} if the withdraw request enabled period to be set is shorter than 6 hours\"}],\"WithdrawRequestPendingPeriodTooLong()\":[{\"notice\":\"Raised on {setWithdrawRequestParams} if the withdraw request pending period to be set is shorter than 3 months\"}]},\"events\":{\"LogClaim(address,string)\":{\"notice\":\"Emitted when a claim is logged\"},\"SetClaimFee(uint256)\":{\"notice\":\"Emitted when a new fee for logging a claim for a bounty is set\"},\"SetDefaultArbitrator(address)\":{\"notice\":\"Emitted when a new default arbitrator is set\"},\"SetDefaultArbitratorCanChangeBounty(bool)\":{\"notice\":\"Emitted when the default arbitrator can change bounty is set\"},\"SetDefaultChallengePeriod(uint256)\":{\"notice\":\"Emitted when a new default challenge period is set\"},\"SetDefaultChallengeTimeOutPeriod(uint256)\":{\"notice\":\"Emitted when a new default challenge timeout period is set\"},\"SetDefaultHATBountySplit(uint256,uint256)\":{\"notice\":\"Emitted when a new default HAT bounty split is set\"},\"SetEmergencyPaused(bool)\":{\"notice\":\"Emitted when the system is put into emergency pause/unpause\"},\"SetFeeSetter(address)\":{\"notice\":\"Emitted when a new fee setter is set\"},\"SetHatVestingParams(uint256,uint256)\":{\"notice\":\"Emitted when new HAT vesting parameters are set\"},\"SetMaxBountyDelay(uint256)\":{\"notice\":\"Emitted when a new timelock delay for setting the max bounty is set\"},\"SetVaultVisibility(address,bool)\":{\"notice\":\"Emitted when the UI visibility of a vault is changed\"},\"SetWithdrawRequestParams(uint256,uint256)\":{\"notice\":\"Emitted when new withdraw request time limits are set\"},\"SetWithdrawSafetyPeriod(uint256,uint256)\":{\"notice\":\"Emitted when new durations are set for withdraw period and safety period\"},\"SwapAndSend(address,uint256,uint256,address)\":{\"notice\":\"Emitted when a swap of vault tokens to HAT tokens is done and the HATS tokens are sent to beneficiary through vesting contract\"}},\"kind\":\"user\",\"methods\":{\"addTokensToSwap(address,address,uint256,uint256)\":{\"notice\":\"Transfer the part of the bounty that is supposed to be swapped into HAT tokens from the HATVault to the registry, and keep track of the amounts to be swapped and sent/burnt in a later transaction\"},\"createVault(address,address,address,address,uint256,(uint256,uint256,uint256),string,uint256,uint256,bool)\":{\"notice\":\"Create a new vault NOTE: Vaults should not use tokens which do not guarantee that the  amount specified is the amount transferred\"},\"getGeneralParameters()\":{\"notice\":\"Returns the general parameters for all vaults\"},\"getNumberOfVaults()\":{\"notice\":\"Returns the number of vaults that have been previously created\"},\"logClaim(string)\":{\"notice\":\"Emit an event that includes the given _descriptionHash This can be used by the claimer as evidence that she had access to the information at the time of the call if a {generalParameters.claimFee} > 0, the caller must send that amount of ETH for the claim to succeed\"},\"setClaimFee(uint256)\":{\"notice\":\"Called by governance to set the fee for logging a claim for a bounty in any vault.\"},\"setDefaultArbitrator(address)\":{\"notice\":\"Called by governance to set the default arbitrator.\"},\"setDefaultArbitratorCanChangeBounty(bool)\":{\"notice\":\"Called by governance to set Whether the arbitrator can change bounty of claims.\"},\"setDefaultChallengePeriod(uint256)\":{\"notice\":\"Called by governance to set the default challenge period\"},\"setDefaultChallengeTimeOutPeriod(uint256)\":{\"notice\":\"Called by governance to set the default challenge timeout\"},\"setDefaultHATBountySplit(uint256,uint256)\":{\"notice\":\"Called by governance to set the default percentage of each claim bounty that will be swapped for hats and sent to the governance or vested for the hacker\"},\"setEmergencyPaused(bool)\":{\"notice\":\"Called by governance to pause/unpause the system in case of an emergency\"},\"setFeeSetter(address)\":{\"notice\":\"Called by governance to set the fee setter role\"},\"setHatVestingParams(uint256,uint256)\":{\"notice\":\"Called by governance to set vesting params for rewarding hackers with rewardToken, for all vaults\"},\"setMaxBountyDelay(uint256)\":{\"notice\":\"Called by governance to set the timelock delay for setting the max bounty (the time between setPendingMaxBounty and setMaxBounty)\"},\"setVaultVisibility(address,bool)\":{\"notice\":\"Called by governance to change the UI visibility of a vault\"},\"setWithdrawRequestParams(uint256,uint256)\":{\"notice\":\"Called by governance to set time limits for withdraw requests\"},\"setWithdrawSafetyPeriod(uint256,uint256)\":{\"notice\":\"Called by governance to set the withdraw period and safety period, which are always interchanging. The safety period is time that the committee can submit claims for  bounty payouts, and during which withdrawals are disabled and the bounty split cannot be changed.\"},\"swapAndSend(address,address[],uint256,address,bytes)\":{\"notice\":\"Called by governance to swap the given asset to HAT tokens and  distribute the HAT tokens: Send to governance their share and send to beneficiaries their share through a vesting contract.\"},\"validateChallengePeriod(uint256)\":{\"notice\":\"Check that the given challenge period is legal, meaning that it is greater than 1 day and less than 5 days.\"},\"validateChallengeTimeOutPeriod(uint256)\":{\"notice\":\"Check that the given challenge timeout period is legal, meaning that it is greater than 2 days and less than 85 days.\"}},\"notice\":\"The Hats.finance Vault Registry is used to deploy Hats.finance vaults and manage shared parameters. Hats.finance is a proactive bounty protocol for white hat hackers and security experts, where projects, community members, and stakeholders incentivize protocol security and responsible disclosure. Hats create scalable vaults using the project\\u2019s own token. The value of the bounty increases with the success of the token and project. The owner of the registry has the permission to set time limits and bounty parameters and change vaults' info, and to set the other registry roles - fee setter and arbitrator. The arbitrator can challenge submitted claims for bounty payouts made by vaults' committees, approve them with a different bounty percentage or dismiss them. The fee setter can set the fee on withdrawals on all vaults. This project is open-source and can be found at: https://github.com/hats-finance/hats-contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IHATVaultsRegistry.sol\":\"IHATVaultsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IHATVault.sol\":{\"keccak256\":\"0x39ef58e6b37e2ef32d8cf51f29b810f4925fcd261779ffbcc7b040ea2a42faae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bc7459e54a4fe3e79e14184098893f88c52ed4c47f52ebf04665bece9ebf237\",\"dweb:/ipfs/QmZNdrpZGpJgkBhbQmd1zkzZHnw15fBDeVDkK8tex5b6Vn\"]},\"contracts/interfaces/IHATVaultsRegistry.sol\":{\"keccak256\":\"0x9500d5ca066f89ebccaf468dad591dca8bf8c7f6673767aa38185840999ed8ce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17b4fb74dbf539612fbbfd3f4f26e59f56970608a2b10a9a8d54f7beae51bb7c\",\"dweb:/ipfs/QmY3hkcfrbAirsWNpsBHn8347Yq5TBm56n1bjWi5JLrj2o\"]},\"contracts/interfaces/IRewardController.sol\":{\"keccak256\":\"0x8e7198df19e0036e6d09121b934fbd5f0df52a38a0bb0fd66cbcc3dfce03edf5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3cdb4bce2ba60445c091431bb6b8dfd1193ff90ce0247375d479f47c447aec6\",\"dweb:/ipfs/QmZiMFn9WjQEDQkL9uh9hegPSgJvNqdDgad7SpdjPeYt9M\"]},\"node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"keccak256\":\"0x2e991b91bca58c198c3ecd905d281c5e9ae230f4f34f14835294d5fa2d478991\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2cbb3c9fba2ef72dd7a9226296cddcb764bef17d4d5b522c94818a8ee9a390a6\",\"dweb:/ipfs/QmdFhEFbcmzFba6hMN1xFakCzUCsPuRwtEvU2GTKQTxkae\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "AmountSwappedLessThanMinimum"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AmountToSwapIsZero"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ChallengePeriodTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ChallengePeriodTooShort"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ChallengeTimeOutPeriodTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ChallengeTimeOutPeriodTooShort"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DelayTooShort"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "HatVestingDurationSmallerThanPeriods"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "HatVestingDurationTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "HatVestingPeriodsCannotBeZero"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotEnoughFeePaid"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SafetyPeriodTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SwapFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TotalHatsSplitPercentageShouldBeUpToMaxHATSplit"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawPeriodTooShort"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawRequestEnabledPeriodTooLong"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawRequestEnabledPeriodTooShort"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawRequestPendingPeriodTooLong"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogClaim",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetClaimFee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultArbitrator",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetDefaultArbitrator",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_defaultArbitratorCanChangeBounty",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetDefaultArbitratorCanChangeBounty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_defaultChallengePeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetDefaultChallengePeriod",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_defaultChallengeTimeOutPeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetDefaultChallengeTimeOutPeriod",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_defaultBountyGovernanceHAT",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_defaultBountyHackerHATVested",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetDefaultHATBountySplit",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_isEmergencyPaused",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetEmergencyPaused",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_feeSetter",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetFeeSetter",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_duration",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_periods",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetHatVestingParams",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_delay",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetMaxBountyDelay",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_vault",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "_visible",
              "type": "bool",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetVaultVisibility",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_withdrawRequestPendingPeriod",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_withdrawRequestEnablePeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetWithdrawRequestParams",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_withdrawPeriod",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_safetyPeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetWithdrawSafetyPeriod",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_amountSwapped",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_amountSent",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "_tokenLock",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SwapAndSend",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_vault",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_asset",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_committee",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract IRewardController",
              "name": "_rewardController",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_maxBounty",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "struct IHATVault.BountySplit",
              "name": "_bountySplit",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hackerVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hacker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "committee",
                  "type": "uint256"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_bountyVestingDuration",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_bountyVestingPeriods",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "_isPaused",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "VaultCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_hacker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_hackersHatReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_governanceHatReward",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addTokensToSwap"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_committee",
              "type": "address"
            },
            {
              "internalType": "contract IRewardController",
              "name": "_rewardController",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_maxBounty",
              "type": "uint256"
            },
            {
              "internalType": "struct IHATVault.BountySplit",
              "name": "_bountySplit",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hackerVested",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hacker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "committee",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "_bountyVestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_bountyVestingPeriods",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isPaused",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createVault",
          "outputs": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getGeneralParameters",
          "outputs": [
            {
              "internalType": "struct IHATVaultsRegistry.GeneralParameters",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "hatVestingDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hatVestingPeriods",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "safetyPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawRequestEnablePeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawRequestPendingPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "setMaxBountyDelay",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimFee",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getNumberOfVaults",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_descriptionHash",
              "type": "string"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "logClaim"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fee",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimFee"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultArbitrator",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultArbitrator"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_defaultArbitratorCanChangeBounty",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultArbitratorCanChangeBounty"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_defaultChallengePeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultChallengePeriod"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_defaultChallengeTimeOutPeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultChallengeTimeOutPeriod"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_defaultBountyGovernanceHAT",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_defaultBountyHackerHATVested",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultHATBountySplit"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_isEmergencyPaused",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setEmergencyPaused"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_feeSetter",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setFeeSetter"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_periods",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setHatVestingParams"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_delay",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMaxBountyDelay"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_vault",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_visible",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setVaultVisibility"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_withdrawRequestPendingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_withdrawRequestEnablePeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setWithdrawRequestParams"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_withdrawPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_safetyPeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setWithdrawSafetyPeriod"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_asset",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "_beneficiaries",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "_amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_routingContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "_routingPayload",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapAndSend"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_challengePeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "validateChallengePeriod"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_challengeTimeOutPeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "validateChallengeTimeOutPeriod"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bountyGovernanceHAT",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_bountyHackerHATVested",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "validateHATSplit"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addTokensToSwap(address,address,uint256,uint256)": {
            "params": {
              "_asset": "The vault's native token",
              "_governanceHatReward": "The amount of the vault's native token to be swapped to HAT tokens and sent to governance",
              "_hacker": "The address of the beneficiary of the bounty",
              "_hackersHatReward": "The amount of the vault's native token to be swapped to HAT tokens and sent to the hacker via a vesting contract"
            }
          },
          "createVault(address,address,address,address,uint256,(uint256,uint256,uint256),string,uint256,uint256,bool)": {
            "params": {
              "_asset": "The vault's native token",
              "_bountySplit": "The way to split the bounty between the hacker,  hacker vested, and committee.   Each entry is a number between 0 and `HUNDRED_PERCENT`.   Total splits should be equal to `HUNDRED_PERCENT`.",
              "_bountyVestingDuration": "Vesting duration for the part of the bounty that is paid vested in the vault's native token",
              "_bountyVestingPeriods": "Vesting periods for the part of the bounty that is paid vested in the vault's native token",
              "_committee": "The address of the vault's committee ",
              "_descriptionHash": "Hash of the vault description.",
              "_isPaused": "Whether to initialize the vault with deposits disabled",
              "_maxBounty": "The maximum percentage of the vault that can be paid out as a bounty. Must be between 0 and `HUNDRED_PERCENT`",
              "_rewardController": "The reward controller for the vault"
            },
            "returns": {
              "vault": "The address of the new vault"
            }
          },
          "getGeneralParameters()": {
            "returns": {
              "_0": "{GeneralParameters} General parameters for all vaults"
            }
          },
          "getNumberOfVaults()": {
            "returns": {
              "_0": "The number of vaults in the registry"
            }
          },
          "logClaim(string)": {
            "params": {
              "_descriptionHash": "- a hash of an IPFS encrypted file which  describes the claim."
            }
          },
          "setClaimFee(uint256)": {
            "params": {
              "_fee": "Claim fee in ETH to be transferred on any call of {logClaim}"
            }
          },
          "setDefaultArbitrator(address)": {
            "params": {
              "_defaultArbitrator": "The default arbitrator address"
            }
          },
          "setDefaultArbitratorCanChangeBounty(bool)": {
            "params": {
              "_defaultArbitratorCanChangeBounty": "The default for whether the arbitrator can change bounty of claims"
            }
          },
          "setDefaultChallengePeriod(uint256)": {
            "params": {
              "_defaultChallengePeriod": "The default challenge period"
            }
          },
          "setDefaultChallengeTimeOutPeriod(uint256)": {
            "params": {
              "_defaultChallengeTimeOutPeriod": "The Default challenge timeout"
            }
          },
          "setDefaultHATBountySplit(uint256,uint256)": {
            "params": {
              "_defaultBountyGovernanceHAT": "The HAT bounty for governance",
              "_defaultBountyHackerHATVested": "The HAT bounty vested for the hacker"
            }
          },
          "setEmergencyPaused(bool)": {
            "params": {
              "_isEmergencyPaused": "Is the system in an emergency pause"
            }
          },
          "setFeeSetter(address)": {
            "params": {
              "_feeSetter": "Address of new fee setter"
            }
          },
          "setHatVestingParams(uint256,uint256)": {
            "params": {
              "_duration": "Duration of the vesting period. Must be less than 180 days.",
              "_periods": "The number of vesting periods. Must be more than 0 and  less then the vesting duration."
            }
          },
          "setMaxBountyDelay(uint256)": {
            "params": {
              "_delay": "The time period for the delay. Must be at least 2 days."
            }
          },
          "setVaultVisibility(address,bool)": {
            "params": {
              "_vault": "The address of the vault to update",
              "_visible": "Is this vault visible in the UI This parameter can be used by the UI to include or exclude the vault"
            }
          },
          "setWithdrawRequestParams(uint256,uint256)": {
            "params": {
              "_withdrawRequestEnablePeriod": "Time period after the peding period has ended during which withdrawal is enabled",
              "_withdrawRequestPendingPeriod": "Time period where the withdraw request is pending"
            }
          },
          "setWithdrawSafetyPeriod(uint256,uint256)": {
            "params": {
              "_safetyPeriod": "Amount of time during which claims for bounties  can be submitted and withdrawals are disabled. Must be at most 6 hours.",
              "_withdrawPeriod": "Amount of time during which withdrawals are enabled, and the bounty split can be changed by the governance. Must be at least 1 hour."
            }
          },
          "swapAndSend(address,address[],uint256,address,bytes)": {
            "params": {
              "_amountOutMinimum": "Minimum amount of HAT tokens at swap",
              "_asset": "The address of the token to be swapped to HAT tokens",
              "_beneficiaries": "Addresses of beneficiaries",
              "_routingContract": "Routing contract to call for the swap",
              "_routingPayload": "Payload to send to the _routingContract for the swap"
            }
          },
          "validateChallengePeriod(uint256)": {
            "params": {
              "_challengePeriod": "The challenge period to check"
            }
          },
          "validateChallengeTimeOutPeriod(uint256)": {
            "params": {
              "_challengeTimeOutPeriod": "The challenge timeout period to check"
            }
          },
          "validateHATSplit(uint256,uint256)": {
            "details": "Check that a given hats bounty split is legal, meaning that:   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.   Total splits should be less than `MAX_HAT_SPLIT`. function will revert in case the bounty split is not legal.",
            "params": {
              "_bountyGovernanceHAT": "The HAT bounty for governance",
              "_bountyHackerHATVested": "The HAT bounty vested for the hacker"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addTokensToSwap(address,address,uint256,uint256)": {
            "notice": "Transfer the part of the bounty that is supposed to be swapped into HAT tokens from the HATVault to the registry, and keep track of the amounts to be swapped and sent/burnt in a later transaction"
          },
          "createVault(address,address,address,address,uint256,(uint256,uint256,uint256),string,uint256,uint256,bool)": {
            "notice": "Create a new vault NOTE: Vaults should not use tokens which do not guarantee that the  amount specified is the amount transferred"
          },
          "getGeneralParameters()": {
            "notice": "Returns the general parameters for all vaults"
          },
          "getNumberOfVaults()": {
            "notice": "Returns the number of vaults that have been previously created"
          },
          "logClaim(string)": {
            "notice": "Emit an event that includes the given _descriptionHash This can be used by the claimer as evidence that she had access to the information at the time of the call if a {generalParameters.claimFee} > 0, the caller must send that amount of ETH for the claim to succeed"
          },
          "setClaimFee(uint256)": {
            "notice": "Called by governance to set the fee for logging a claim for a bounty in any vault."
          },
          "setDefaultArbitrator(address)": {
            "notice": "Called by governance to set the default arbitrator."
          },
          "setDefaultArbitratorCanChangeBounty(bool)": {
            "notice": "Called by governance to set Whether the arbitrator can change bounty of claims."
          },
          "setDefaultChallengePeriod(uint256)": {
            "notice": "Called by governance to set the default challenge period"
          },
          "setDefaultChallengeTimeOutPeriod(uint256)": {
            "notice": "Called by governance to set the default challenge timeout"
          },
          "setDefaultHATBountySplit(uint256,uint256)": {
            "notice": "Called by governance to set the default percentage of each claim bounty that will be swapped for hats and sent to the governance or vested for the hacker"
          },
          "setEmergencyPaused(bool)": {
            "notice": "Called by governance to pause/unpause the system in case of an emergency"
          },
          "setFeeSetter(address)": {
            "notice": "Called by governance to set the fee setter role"
          },
          "setHatVestingParams(uint256,uint256)": {
            "notice": "Called by governance to set vesting params for rewarding hackers with rewardToken, for all vaults"
          },
          "setMaxBountyDelay(uint256)": {
            "notice": "Called by governance to set the timelock delay for setting the max bounty (the time between setPendingMaxBounty and setMaxBounty)"
          },
          "setVaultVisibility(address,bool)": {
            "notice": "Called by governance to change the UI visibility of a vault"
          },
          "setWithdrawRequestParams(uint256,uint256)": {
            "notice": "Called by governance to set time limits for withdraw requests"
          },
          "setWithdrawSafetyPeriod(uint256,uint256)": {
            "notice": "Called by governance to set the withdraw period and safety period, which are always interchanging. The safety period is time that the committee can submit claims for  bounty payouts, and during which withdrawals are disabled and the bounty split cannot be changed."
          },
          "swapAndSend(address,address[],uint256,address,bytes)": {
            "notice": "Called by governance to swap the given asset to HAT tokens and  distribute the HAT tokens: Send to governance their share and send to beneficiaries their share through a vesting contract."
          },
          "validateChallengePeriod(uint256)": {
            "notice": "Check that the given challenge period is legal, meaning that it is greater than 1 day and less than 5 days."
          },
          "validateChallengeTimeOutPeriod(uint256)": {
            "notice": "Check that the given challenge timeout period is legal, meaning that it is greater than 2 days and less than 85 days."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ensdomains/=node_modules/@ensdomains/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/interfaces/IHATVaultsRegistry.sol": "IHATVaultsRegistry"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interfaces/IHATVault.sol": {
        "keccak256": "0x39ef58e6b37e2ef32d8cf51f29b810f4925fcd261779ffbcc7b040ea2a42faae",
        "urls": [
          "bzz-raw://7bc7459e54a4fe3e79e14184098893f88c52ed4c47f52ebf04665bece9ebf237",
          "dweb:/ipfs/QmZNdrpZGpJgkBhbQmd1zkzZHnw15fBDeVDkK8tex5b6Vn"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IHATVaultsRegistry.sol": {
        "keccak256": "0x9500d5ca066f89ebccaf468dad591dca8bf8c7f6673767aa38185840999ed8ce",
        "urls": [
          "bzz-raw://17b4fb74dbf539612fbbfd3f4f26e59f56970608a2b10a9a8d54f7beae51bb7c",
          "dweb:/ipfs/QmY3hkcfrbAirsWNpsBHn8347Yq5TBm56n1bjWi5JLrj2o"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IRewardController.sol": {
        "keccak256": "0x8e7198df19e0036e6d09121b934fbd5f0df52a38a0bb0fd66cbcc3dfce03edf5",
        "urls": [
          "bzz-raw://c3cdb4bce2ba60445c091431bb6b8dfd1193ff90ce0247375d479f47c447aec6",
          "dweb:/ipfs/QmZiMFn9WjQEDQkL9uh9hegPSgJvNqdDgad7SpdjPeYt9M"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol": {
        "keccak256": "0x2e991b91bca58c198c3ecd905d281c5e9ae230f4f34f14835294d5fa2d478991",
        "urls": [
          "bzz-raw://2cbb3c9fba2ef72dd7a9226296cddcb764bef17d4d5b522c94818a8ee9a390a6",
          "dweb:/ipfs/QmdFhEFbcmzFba6hMN1xFakCzUCsPuRwtEvU2GTKQTxkae"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
        "keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
        "urls": [
          "bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
          "dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
        "keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
        "urls": [
          "bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d",
          "dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/interfaces/IHATVaultsRegistry.sol",
    "id": 5557,
    "exportedSymbols": {
      "IERC20": [
        13077
      ],
      "IERC20MetadataUpgradeable": [
        9697
      ],
      "IERC20Upgradeable": [
        9075
      ],
      "IERC4626Upgradeable": [
        8176
      ],
      "IHATVault": [
        5177
      ],
      "IHATVaultsRegistry": [
        5556
      ],
      "IRewardController": [
        5663
      ]
    },
    "nodeType": "SourceUnit",
    "src": "118:21605:7",
    "nodes": [
      {
        "id": 5179,
        "nodeType": "PragmaDirective",
        "src": "118:23:7",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".16"
        ]
      },
      {
        "id": 5180,
        "nodeType": "ImportDirective",
        "src": "143:33:7",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRewardController.sol",
        "file": "./IRewardController.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5557,
        "sourceUnit": 5664,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 5181,
        "nodeType": "ImportDirective",
        "src": "177:25:7",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IHATVault.sol",
        "file": "./IHATVault.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5557,
        "sourceUnit": 5178,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 5556,
        "nodeType": "ContractDefinition",
        "src": "1409:20313:7",
        "nodes": [
          {
            "id": 5199,
            "nodeType": "StructDefinition",
            "src": "1492:1193:7",
            "nodes": [],
            "canonicalName": "IHATVaultsRegistry.GeneralParameters",
            "members": [
              {
                "constant": false,
                "id": 5184,
                "mutability": "mutable",
                "name": "hatVestingDuration",
                "nameLocation": "1624:18:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "1616:26:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5183,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1616:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5186,
                "mutability": "mutable",
                "name": "hatVestingPeriods",
                "nameLocation": "1748:17:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "1740:25:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5185,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1740:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5188,
                "mutability": "mutable",
                "name": "withdrawPeriod",
                "nameLocation": "1853:14:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "1845:22:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5187,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1845:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5190,
                "mutability": "mutable",
                "name": "safetyPeriod",
                "nameLocation": "2069:12:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "2061:20:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5189,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2061:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5192,
                "mutability": "mutable",
                "name": "withdrawRequestEnablePeriod",
                "nameLocation": "2247:27:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "2239:35:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5191,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2239:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5194,
                "mutability": "mutable",
                "name": "withdrawRequestPendingPeriod",
                "nameLocation": "2385:28:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "2377:36:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5193,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2377:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5196,
                "mutability": "mutable",
                "name": "setMaxBountyDelay",
                "nameLocation": "2563:17:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "2555:25:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5195,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2555:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5198,
                "mutability": "mutable",
                "name": "claimFee",
                "nameLocation": "2668:8:7",
                "nodeType": "VariableDeclaration",
                "scope": 5199,
                "src": "2660:16:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5197,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2660:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "GeneralParameters",
            "nameLocation": "1499:17:7",
            "scope": 5556,
            "visibility": "public"
          },
          {
            "id": 5202,
            "nodeType": "ErrorDefinition",
            "src": "2821:31:7",
            "nodes": [],
            "documentation": {
              "id": 5200,
              "nodeType": "StructuredDocumentation",
              "src": "2691:125:7",
              "text": " @notice Raised on {setWithdrawSafetyPeriod} if the withdraw period to\n be set is shorter than 1 hour"
            },
            "errorSelector": "9a4e9a8d",
            "name": "WithdrawPeriodTooShort",
            "nameLocation": "2827:22:7",
            "parameters": {
              "id": 5201,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2849:2:7"
            }
          },
          {
            "id": 5205,
            "nodeType": "ErrorDefinition",
            "src": "2986:28:7",
            "nodes": [],
            "documentation": {
              "id": 5203,
              "nodeType": "StructuredDocumentation",
              "src": "2858:123:7",
              "text": " @notice Raised on {setWithdrawSafetyPeriod} if the safety period to\n be set is longer than 6 hours"
            },
            "errorSelector": "21890f02",
            "name": "SafetyPeriodTooLong",
            "nameLocation": "2992:19:7",
            "parameters": {
              "id": 5204,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3011:2:7"
            }
          },
          {
            "id": 5208,
            "nodeType": "ErrorDefinition",
            "src": "3169:44:7",
            "nodes": [],
            "documentation": {
              "id": 5206,
              "nodeType": "StructuredDocumentation",
              "src": "3020:144:7",
              "text": " @notice Raised on {setWithdrawRequestParams} if the withdraw request\n pending period to be set is shorter than 3 months"
            },
            "errorSelector": "766cee2b",
            "name": "WithdrawRequestPendingPeriodTooLong",
            "nameLocation": "3175:35:7",
            "parameters": {
              "id": 5207,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3210:2:7"
            }
          },
          {
            "id": 5211,
            "nodeType": "ErrorDefinition",
            "src": "3367:45:7",
            "nodes": [],
            "documentation": {
              "id": 5209,
              "nodeType": "StructuredDocumentation",
              "src": "3219:143:7",
              "text": " @notice Raised on {setWithdrawRequestParams} if the withdraw request\n enabled period to be set is shorter than 6 hours"
            },
            "errorSelector": "87505669",
            "name": "WithdrawRequestEnabledPeriodTooShort",
            "nameLocation": "3373:36:7",
            "parameters": {
              "id": 5210,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3409:2:7"
            }
          },
          {
            "id": 5214,
            "nodeType": "ErrorDefinition",
            "src": "3566:44:7",
            "nodes": [],
            "documentation": {
              "id": 5212,
              "nodeType": "StructuredDocumentation",
              "src": "3418:143:7",
              "text": " @notice Raised on {setWithdrawRequestParams} if the withdraw request\n enabled period to be set is longer than 100 days"
            },
            "errorSelector": "332f3812",
            "name": "WithdrawRequestEnabledPeriodTooLong",
            "nameLocation": "3572:35:7",
            "parameters": {
              "id": 5213,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3607:2:7"
            }
          },
          {
            "id": 5217,
            "nodeType": "ErrorDefinition",
            "src": "3744:34:7",
            "nodes": [],
            "documentation": {
              "id": 5215,
              "nodeType": "StructuredDocumentation",
              "src": "3616:123:7",
              "text": " @notice Raised on {setHatVestingParams} if the vesting duration to be\n set is longer than 180 days"
            },
            "errorSelector": "181b6a8d",
            "name": "HatVestingDurationTooLong",
            "nameLocation": "3750:25:7",
            "parameters": {
              "id": 5216,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3775:2:7"
            }
          },
          {
            "id": 5220,
            "nodeType": "ErrorDefinition",
            "src": "3892:38:7",
            "nodes": [],
            "documentation": {
              "id": 5218,
              "nodeType": "StructuredDocumentation",
              "src": "3784:103:7",
              "text": " @notice Raised on {setHatVestingParams} if the vesting periods to be\n set is 0"
            },
            "errorSelector": "497a0fc3",
            "name": "HatVestingPeriodsCannotBeZero",
            "nameLocation": "3898:29:7",
            "parameters": {
              "id": 5219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3927:2:7"
            }
          },
          {
            "id": 5223,
            "nodeType": "ErrorDefinition",
            "src": "4071:45:7",
            "nodes": [],
            "documentation": {
              "id": 5221,
              "nodeType": "StructuredDocumentation",
              "src": "3940:126:7",
              "text": " @notice Raised on {setHatVestingParams} if the vesting duration is \n smaller than the vesting periods"
            },
            "errorSelector": "3424fba0",
            "name": "HatVestingDurationSmallerThanPeriods",
            "nameLocation": "4077:36:7",
            "parameters": {
              "id": 5222,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4113:2:7"
            }
          },
          {
            "id": 5226,
            "nodeType": "ErrorDefinition",
            "src": "4241:22:7",
            "nodes": [],
            "documentation": {
              "id": 5224,
              "nodeType": "StructuredDocumentation",
              "src": "4122:114:7",
              "text": " @notice Raised on {setMaxBountyDelay} if the max bounty to be set is\n shorter than 2 days"
            },
            "errorSelector": "514e00f1",
            "name": "DelayTooShort",
            "nameLocation": "4247:13:7",
            "parameters": {
              "id": 5225,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4260:2:7"
            }
          },
          {
            "id": 5229,
            "nodeType": "ErrorDefinition",
            "src": "4354:27:7",
            "nodes": [],
            "documentation": {
              "id": 5227,
              "nodeType": "StructuredDocumentation",
              "src": "4269:80:7",
              "text": " @notice Raised on {swapAndSend} if the amount to swap is zero"
            },
            "errorSelector": "dbe66a0f",
            "name": "AmountToSwapIsZero",
            "nameLocation": "4360:18:7",
            "parameters": {
              "id": 5228,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4378:2:7"
            }
          },
          {
            "id": 5232,
            "nodeType": "ErrorDefinition",
            "src": "4473:19:7",
            "nodes": [],
            "documentation": {
              "id": 5230,
              "nodeType": "StructuredDocumentation",
              "src": "4387:81:7",
              "text": " @notice Raised on {swapAndSend} if the swap was not successful"
            },
            "errorSelector": "81ceff30",
            "name": "SwapFailed",
            "nameLocation": "4479:10:7",
            "parameters": {
              "id": 5231,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4489:2:7"
            }
          },
          {
            "id": 5235,
            "nodeType": "ErrorDefinition",
            "src": "4676:37:7",
            "nodes": [],
            "documentation": {
              "id": 5233,
              "nodeType": "StructuredDocumentation",
              "src": "4527:144:7",
              "text": " @notice Raised on {swapAndSend} if the amount that was recieved in\n the swap was less than the minimum amount specified"
            },
            "errorSelector": "8a866e25",
            "name": "AmountSwappedLessThanMinimum",
            "nameLocation": "4682:28:7",
            "parameters": {
              "id": 5234,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4710:2:7"
            }
          },
          {
            "id": 5238,
            "nodeType": "ErrorDefinition",
            "src": "4855:56:7",
            "nodes": [],
            "documentation": {
              "id": 5236,
              "nodeType": "StructuredDocumentation",
              "src": "4719:131:7",
              "text": " @notice Raised on {setDefaultHATBountySplit} if the split to be set is\n greater than 20% (defined as 2000)"
            },
            "errorSelector": "1ebd55a4",
            "name": "TotalHatsSplitPercentageShouldBeUpToMaxHATSplit",
            "nameLocation": "4861:47:7",
            "parameters": {
              "id": 5237,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4908:2:7"
            }
          },
          {
            "id": 5241,
            "nodeType": "ErrorDefinition",
            "src": "5050:32:7",
            "nodes": [],
            "documentation": {
              "id": 5239,
              "nodeType": "StructuredDocumentation",
              "src": "4917:128:7",
              "text": " @notice Raised on {setDefaultChallengePeriod} if the challenge period\n  to be set is shorter than 1 day"
            },
            "errorSelector": "3a50e6a1",
            "name": "ChallengePeriodTooShort",
            "nameLocation": "5056:23:7",
            "parameters": {
              "id": 5240,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5079:2:7"
            }
          },
          {
            "id": 5244,
            "nodeType": "ErrorDefinition",
            "src": "5221:31:7",
            "nodes": [],
            "documentation": {
              "id": 5242,
              "nodeType": "StructuredDocumentation",
              "src": "5088:128:7",
              "text": " @notice Raised on {setDefaultChallengePeriod} if the challenge period\n  to be set is longer than 5 days"
            },
            "errorSelector": "2f6fdfd6",
            "name": "ChallengePeriodTooLong",
            "nameLocation": "5227:22:7",
            "parameters": {
              "id": 5243,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5249:2:7"
            }
          },
          {
            "id": 5247,
            "nodeType": "ErrorDefinition",
            "src": "5413:39:7",
            "nodes": [],
            "documentation": {
              "id": 5245,
              "nodeType": "StructuredDocumentation",
              "src": "5266:142:7",
              "text": " @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\n timeout period to be set is shorter than 1 day"
            },
            "errorSelector": "0fe180cd",
            "name": "ChallengeTimeOutPeriodTooShort",
            "nameLocation": "5419:30:7",
            "parameters": {
              "id": 5246,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5449:2:7"
            }
          },
          {
            "id": 5250,
            "nodeType": "ErrorDefinition",
            "src": "5606:38:7",
            "nodes": [],
            "documentation": {
              "id": 5248,
              "nodeType": "StructuredDocumentation",
              "src": "5458:143:7",
              "text": " @notice Raised on {setDefaultChallengeTimeOutPeriod} if the challenge\n timeout period to be set is longer than 85 days"
            },
            "errorSelector": "b33bfaba",
            "name": "ChallengeTimeOutPeriodTooLong",
            "nameLocation": "5612:29:7",
            "parameters": {
              "id": 5249,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5641:2:7"
            }
          },
          {
            "id": 5253,
            "nodeType": "ErrorDefinition",
            "src": "5810:25:7",
            "nodes": [],
            "documentation": {
              "id": 5251,
              "nodeType": "StructuredDocumentation",
              "src": "5654:151:7",
              "text": " @notice Raised on {LogClaim} if the transaction was not sent with the\n amount of ETH specified as {generalParameters.claimFee}"
            },
            "errorSelector": "3244470d",
            "name": "NotEnoughFeePaid",
            "nameLocation": "5816:16:7",
            "parameters": {
              "id": 5252,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5832:2:7"
            }
          },
          {
            "id": 5260,
            "nodeType": "EventDefinition",
            "src": "6053:66:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5254,
              "nodeType": "StructuredDocumentation",
              "src": "5841:207:7",
              "text": " @notice Emitted when a claim is logged\n @param _claimer The address of the claimer\n @param _descriptionHash - a hash of an ipfs encrypted file which\n describes the claim."
            },
            "eventSelector": "9fcc410c642f895d8e83453cc710a30c7f00e42070fb7fd399c29b24781615e8",
            "name": "LogClaim",
            "nameLocation": "6059:8:7",
            "parameters": {
              "id": 5259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5256,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "6084:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5260,
                  "src": "6068:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5255,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6068:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5258,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "6101:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5260,
                  "src": "6094:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 5257,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6094:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6067:51:7"
            }
          },
          {
            "id": 5265,
            "nodeType": "EventDefinition",
            "src": "6252:47:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5261,
              "nodeType": "StructuredDocumentation",
              "src": "6125:122:7",
              "text": " @notice Emitted when a new fee setter is set\n @param _feeSetter The address of the new fee setter"
            },
            "eventSelector": "9993507f53024702e2de1be66f6c48c8957ac708927b86b3bdf4e335f5869470",
            "name": "SetFeeSetter",
            "nameLocation": "6258:12:7",
            "parameters": {
              "id": 5264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5263,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_feeSetter",
                  "nameLocation": "6287:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5265,
                  "src": "6271:26:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5262,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6271:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6270:28:7"
            }
          },
          {
            "id": 5272,
            "nodeType": "EventDefinition",
            "src": "6622:130:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5266,
              "nodeType": "StructuredDocumentation",
              "src": "6305:312:7",
              "text": " @notice Emitted when new withdraw request time limits are set\n @param _withdrawRequestPendingPeriod Time period where the withdraw\n request is pending\n @param _withdrawRequestEnablePeriod Time period after the peding period\n has ended during which withdrawal is enabled"
            },
            "eventSelector": "7b8aa35646b8fddc3ccaae8e1069d8c6c365e2ba2e11bb1f0018f8d01992f25b",
            "name": "SetWithdrawRequestParams",
            "nameLocation": "6628:24:7",
            "parameters": {
              "id": 5271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5268,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_withdrawRequestPendingPeriod",
                  "nameLocation": "6670:29:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5272,
                  "src": "6662:37:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5267,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6662:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5270,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_withdrawRequestEnablePeriod",
                  "nameLocation": "6717:28:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5272,
                  "src": "6709:36:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5269,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6709:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6652:99:7"
            }
          },
          {
            "id": 5277,
            "nodeType": "EventDefinition",
            "src": "6932:32:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5273,
              "nodeType": "StructuredDocumentation",
              "src": "6758:169:7",
              "text": " @notice Emitted when a new fee for logging a claim for a bounty is set\n @param _fee Claim fee in ETH to be transferred on any call of {logClaim}"
            },
            "eventSelector": "13fa675fefcae94b0250d92c1fec53cd08f7031592b28bf9429f840b7d255097",
            "name": "SetClaimFee",
            "nameLocation": "6938:11:7",
            "parameters": {
              "id": 5276,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5275,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_fee",
                  "nameLocation": "6958:4:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5277,
                  "src": "6950:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5274,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6950:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6949:14:7"
            }
          },
          {
            "id": 5284,
            "nodeType": "EventDefinition",
            "src": "7355:100:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5278,
              "nodeType": "StructuredDocumentation",
              "src": "6970:380:7",
              "text": " @notice Emitted when new durations are set for withdraw period and\n safety period\n @param _withdrawPeriod Amount of time during which withdrawals are\n enabled, and the bounty split can be changed by the governance\n @param _safetyPeriod Amount of time during which claims for bounties \n can be submitted and withdrawals are disabled"
            },
            "eventSelector": "47c8a5b15f6172a5053bfac488642484dd38e9c0f3073c23c5d822c4cbab5309",
            "name": "SetWithdrawSafetyPeriod",
            "nameLocation": "7361:23:7",
            "parameters": {
              "id": 5283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5280,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_withdrawPeriod",
                  "nameLocation": "7402:15:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5284,
                  "src": "7394:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5279,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7394:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5282,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_safetyPeriod",
                  "nameLocation": "7435:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5284,
                  "src": "7427:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5281,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7427:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7384:70:7"
            }
          },
          {
            "id": 5291,
            "nodeType": "EventDefinition",
            "src": "7652:63:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5285,
              "nodeType": "StructuredDocumentation",
              "src": "7461:186:7",
              "text": " @notice Emitted when new HAT vesting parameters are set\n @param _duration The duration of the vesting period\n @param _periods The number of vesting periods"
            },
            "eventSelector": "a3d5527033c65a7e5eda0ffec2fe75b8bfc358a419914452e5e29993f531136d",
            "name": "SetHatVestingParams",
            "nameLocation": "7658:19:7",
            "parameters": {
              "id": 5290,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5287,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_duration",
                  "nameLocation": "7686:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5291,
                  "src": "7678:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5286,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7678:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5289,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_periods",
                  "nameLocation": "7705:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5291,
                  "src": "7697:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5288,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7697:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7677:37:7"
            }
          },
          {
            "id": 5296,
            "nodeType": "EventDefinition",
            "src": "7878:40:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5292,
              "nodeType": "StructuredDocumentation",
              "src": "7721:152:7",
              "text": " @notice Emitted when a new timelock delay for setting the\n max bounty is set\n @param _delay The time period for the delay"
            },
            "eventSelector": "c2f118f047950efbfb94865ef4fc99eedc6b5e992e4fb970552deba4fda0d8e4",
            "name": "SetMaxBountyDelay",
            "nameLocation": "7884:17:7",
            "parameters": {
              "id": 5295,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5294,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_delay",
                  "nameLocation": "7910:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5296,
                  "src": "7902:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5293,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7902:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7901:16:7"
            }
          },
          {
            "id": 5303,
            "nodeType": "EventDefinition",
            "src": "8119:72:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5297,
              "nodeType": "StructuredDocumentation",
              "src": "7924:190:7",
              "text": " @notice Emitted when the UI visibility of a vault is changed\n @param _vault The address of the vault to update\n @param _visible Is this vault visible in the UI"
            },
            "eventSelector": "0f8de79a0a8e021d06491203f918550c01da39c26f2e03c5f5571c75edb7d937",
            "name": "SetVaultVisibility",
            "nameLocation": "8125:18:7",
            "parameters": {
              "id": 5302,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5299,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_vault",
                  "nameLocation": "8160:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5303,
                  "src": "8144:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5298,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8144:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5301,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_visible",
                  "nameLocation": "8181:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5303,
                  "src": "8168:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5300,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8168:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8143:47:7"
            }
          },
          {
            "id": 5328,
            "nodeType": "EventDefinition",
            "src": "9132:370:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5304,
              "nodeType": "StructuredDocumentation",
              "src": "8197:930:7",
              "text": "@dev Emitted when a new vault is created\n @param _vault The address of the vault to add to the registry\n @param _asset The vault's native token\n @param _committee The address of the vault's committee \n @param _rewardController The reward controller for the vault\n @param _maxBounty The maximum percentage of the vault that can be paid\n out as a bounty. Must be between 0 and 100% (defined as 10000)\n @param _bountySplit The way to split the bounty between the hacker, \n hacker vested, and committee.\n   Each entry is a number between 0 and 100%\n   Total splits should be equal to 100%\n @param _descriptionHash Hash of the vault description.\n @param _bountyVestingDuration The duration of the vesting period of\n the part of the bounty that is vested in vault's native token.\n @param _bountyVestingDuration The number of vesting periods"
            },
            "eventSelector": "6b9670698cdb09faa8051d300c46f33e8407a000d9fac8273c30335c5418f336",
            "name": "VaultCreated",
            "nameLocation": "9138:12:7",
            "parameters": {
              "id": 5327,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5306,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_vault",
                  "nameLocation": "9176:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9160:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5305,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9160:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5308,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_asset",
                  "nameLocation": "9208:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9192:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5307,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9192:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5310,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_committee",
                  "nameLocation": "9232:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9224:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5309,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9224:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5313,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_rewardController",
                  "nameLocation": "9270:17:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9252:35:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRewardController_$5663",
                    "typeString": "contract IRewardController"
                  },
                  "typeName": {
                    "id": 5312,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5311,
                      "name": "IRewardController",
                      "nameLocations": [
                        "9252:17:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5663,
                      "src": "9252:17:7"
                    },
                    "referencedDeclaration": 5663,
                    "src": "9252:17:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRewardController_$5663",
                      "typeString": "contract IRewardController"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5315,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_maxBounty",
                  "nameLocation": "9305:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9297:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5314,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9297:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5318,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountySplit",
                  "nameLocation": "9347:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9325:34:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BountySplit_$4697_memory_ptr",
                    "typeString": "struct IHATVault.BountySplit"
                  },
                  "typeName": {
                    "id": 5317,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5316,
                      "name": "IHATVault.BountySplit",
                      "nameLocations": [
                        "9325:9:7",
                        "9335:11:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4697,
                      "src": "9325:21:7"
                    },
                    "referencedDeclaration": 4697,
                    "src": "9325:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BountySplit_$4697_storage_ptr",
                      "typeString": "struct IHATVault.BountySplit"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5320,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "9376:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9369:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 5319,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "9369:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5322,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountyVestingDuration",
                  "nameLocation": "9410:22:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9402:30:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5321,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9402:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5324,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_bountyVestingPeriods",
                  "nameLocation": "9450:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9442:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5323,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9442:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5326,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_isPaused",
                  "nameLocation": "9486:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5328,
                  "src": "9481:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5325,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9481:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9150:351:7"
            }
          },
          {
            "id": 5339,
            "nodeType": "EventDefinition",
            "src": "9996:159:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5329,
              "nodeType": "StructuredDocumentation",
              "src": "9512:479:7",
              "text": "@notice Emitted when a swap of vault tokens to HAT tokens is done and\n the HATS tokens are sent to beneficiary through vesting contract\n @param _beneficiary Address of beneficiary\n @param _amountSwapped Amount of vault's native tokens that was swapped\n @param _amountSent Amount of HAT tokens sent to beneficiary\n @param _tokenLock Address of the token lock contract that holds the HAT\n tokens (address(0) if no token lock is used)"
            },
            "eventSelector": "4f8abed31d725d1e727a30b06defad85513b99ee0d373925f63d71e099edaa30",
            "name": "SwapAndSend",
            "nameLocation": "10002:11:7",
            "parameters": {
              "id": 5338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5331,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "10039:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5339,
                  "src": "10023:28:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5330,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10023:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5333,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_amountSwapped",
                  "nameLocation": "10069:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5339,
                  "src": "10061:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5332,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10061:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5335,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_amountSent",
                  "nameLocation": "10101:11:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5339,
                  "src": "10093:19:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5334,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10093:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5337,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_tokenLock",
                  "nameLocation": "10138:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5339,
                  "src": "10122:26:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5336,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10122:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10013:141:7"
            }
          },
          {
            "id": 5346,
            "nodeType": "EventDefinition",
            "src": "10434:107:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5340,
              "nodeType": "StructuredDocumentation",
              "src": "10161:268:7",
              "text": " @notice Emitted when a new default HAT bounty split is set\n @param _defaultBountyGovernanceHAT The new default HAT bounty part sent to governance\n @param _defaultBountyHackerHATVested The new default HAT bounty part vseted for the hacker"
            },
            "eventSelector": "9b9cfb21b737a43af5e89fc41ea51449648ce863399879a0625210588b164e5a",
            "name": "SetDefaultHATBountySplit",
            "nameLocation": "10440:24:7",
            "parameters": {
              "id": 5345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5342,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_defaultBountyGovernanceHAT",
                  "nameLocation": "10473:27:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5346,
                  "src": "10465:35:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5341,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10465:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5344,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_defaultBountyHackerHATVested",
                  "nameLocation": "10510:29:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5346,
                  "src": "10502:37:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5343,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10502:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10464:76:7"
            }
          },
          {
            "id": 5351,
            "nodeType": "EventDefinition",
            "src": "10690:63:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5347,
              "nodeType": "StructuredDocumentation",
              "src": "10547:138:7",
              "text": " @notice Emitted when a new default arbitrator is set\n @param _defaultArbitrator The address of the new arbitrator"
            },
            "eventSelector": "4664bc54da0879a6626395d3154ebb4adef21b4ced228635ce9583e86148a9a7",
            "name": "SetDefaultArbitrator",
            "nameLocation": "10696:20:7",
            "parameters": {
              "id": 5350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5349,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_defaultArbitrator",
                  "nameLocation": "10733:18:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5351,
                  "src": "10717:34:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5348,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10717:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10716:36:7"
            }
          },
          {
            "id": 5356,
            "nodeType": "EventDefinition",
            "src": "10913:65:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5352,
              "nodeType": "StructuredDocumentation",
              "src": "10759:148:7",
              "text": " @notice Emitted when a new default challenge period is set\n @param _defaultChallengePeriod The new default challenge period"
            },
            "eventSelector": "c14f60dbf7139b2e92ad845e95c05208c6070962e410202d3b8ae7a1378cde35",
            "name": "SetDefaultChallengePeriod",
            "nameLocation": "10919:25:7",
            "parameters": {
              "id": 5355,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5354,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_defaultChallengePeriod",
                  "nameLocation": "10953:23:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5356,
                  "src": "10945:31:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5353,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10945:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10944:33:7"
            }
          },
          {
            "id": 5361,
            "nodeType": "EventDefinition",
            "src": "11167:79:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5357,
              "nodeType": "StructuredDocumentation",
              "src": "10984:178:7",
              "text": " @notice Emitted when a new default challenge timeout period is set\n @param _defaultChallengeTimeOutPeriod The new default challenge timeout\n period"
            },
            "eventSelector": "e6f3ddadc73ca32beb7d9755d5a7d82ab53101c097e743fd05412e6a1ce9deb9",
            "name": "SetDefaultChallengeTimeOutPeriod",
            "nameLocation": "11173:32:7",
            "parameters": {
              "id": 5360,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5359,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_defaultChallengeTimeOutPeriod",
                  "nameLocation": "11214:30:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5361,
                  "src": "11206:38:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5358,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11206:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11205:40:7"
            }
          },
          {
            "id": 5366,
            "nodeType": "EventDefinition",
            "src": "11443:82:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5362,
              "nodeType": "StructuredDocumentation",
              "src": "11252:186:7",
              "text": " @notice Emitted when the default arbitrator can change bounty is set\n @param _defaultArbitratorCanChangeBounty Whether the arbitrator can change bounty of claims"
            },
            "eventSelector": "8dd94cb9d51a52430f03387ae2b623450f5bbb1201ce3d08f9dc3561f258cf41",
            "name": "SetDefaultArbitratorCanChangeBounty",
            "nameLocation": "11449:35:7",
            "parameters": {
              "id": 5365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5364,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_defaultArbitratorCanChangeBounty",
                  "nameLocation": "11490:33:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5366,
                  "src": "11485:38:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5363,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11485:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11484:40:7"
            }
          },
          {
            "id": 5371,
            "nodeType": "EventDefinition",
            "src": "11684:50:7",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 5367,
              "nodeType": "StructuredDocumentation",
              "src": "11531:148:7",
              "text": "@notice Emitted when the system is put into emergency pause/unpause\n @param _isEmergencyPaused Is the system in an emergency pause"
            },
            "eventSelector": "a18d588b4da0466ca9a3ade6753c1cf94f4ccc599b9134045aeb55aef53293c8",
            "name": "SetEmergencyPaused",
            "nameLocation": "11690:18:7",
            "parameters": {
              "id": 5370,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5369,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_isEmergencyPaused",
                  "nameLocation": "11714:18:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5371,
                  "src": "11709:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5368,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11709:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11708:25:7"
            }
          },
          {
            "id": 5377,
            "nodeType": "FunctionDefinition",
            "src": "11920:62:7",
            "nodes": [],
            "documentation": {
              "id": 5372,
              "nodeType": "StructuredDocumentation",
              "src": "11740:175:7",
              "text": " @notice Called by governance to pause/unpause the system in case of an\n emergency\n @param _isEmergencyPaused Is the system in an emergency pause"
            },
            "functionSelector": "9d0ab89f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setEmergencyPaused",
            "nameLocation": "11929:18:7",
            "parameters": {
              "id": 5375,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5374,
                  "mutability": "mutable",
                  "name": "_isEmergencyPaused",
                  "nameLocation": "11953:18:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5377,
                  "src": "11948:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5373,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11948:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11947:25:7"
            },
            "returnParameters": {
              "id": 5376,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11981:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5383,
            "nodeType": "FunctionDefinition",
            "src": "12414:67:7",
            "nodes": [],
            "documentation": {
              "id": 5378,
              "nodeType": "StructuredDocumentation",
              "src": "11988:421:7",
              "text": " @notice Emit an event that includes the given _descriptionHash\n This can be used by the claimer as evidence that she had access to the\n information at the time of the call\n if a {generalParameters.claimFee} > 0, the caller must send that amount\n of ETH for the claim to succeed\n @param _descriptionHash - a hash of an IPFS encrypted file which \n describes the claim."
            },
            "functionSelector": "e367497d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "logClaim",
            "nameLocation": "12423:8:7",
            "parameters": {
              "id": 5381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5380,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "12446:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5383,
                  "src": "12432:30:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 5379,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "12432:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12431:32:7"
            },
            "returnParameters": {
              "id": 5382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12480:0:7"
            },
            "scope": 5556,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5391,
            "nodeType": "FunctionDefinition",
            "src": "12832:150:7",
            "nodes": [],
            "documentation": {
              "id": 5384,
              "nodeType": "StructuredDocumentation",
              "src": "12487:340:7",
              "text": " @notice Called by governance to set the default percentage of each claim bounty\n that will be swapped for hats and sent to the governance or vested for the hacker\n @param _defaultBountyGovernanceHAT The HAT bounty for governance\n @param _defaultBountyHackerHATVested The HAT bounty vested for the hacker"
            },
            "functionSelector": "132b1cc6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDefaultHATBountySplit",
            "nameLocation": "12841:24:7",
            "parameters": {
              "id": 5389,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5386,
                  "mutability": "mutable",
                  "name": "_defaultBountyGovernanceHAT",
                  "nameLocation": "12883:27:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5391,
                  "src": "12875:35:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5385,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12875:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5388,
                  "mutability": "mutable",
                  "name": "_defaultBountyHackerHATVested",
                  "nameLocation": "12928:29:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5391,
                  "src": "12920:37:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5387,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12920:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12865:98:7"
            },
            "returnParameters": {
              "id": 5390,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12981:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5399,
            "nodeType": "FunctionDefinition",
            "src": "13416:120:7",
            "nodes": [],
            "documentation": {
              "id": 5392,
              "nodeType": "StructuredDocumentation",
              "src": "12988:423:7",
              "text": " @dev Check that a given hats bounty split is legal, meaning that:\n   Each entry is a number between 0 and less than `MAX_HAT_SPLIT`.\n   Total splits should be less than `MAX_HAT_SPLIT`.\n function will revert in case the bounty split is not legal.\n @param _bountyGovernanceHAT The HAT bounty for governance\n @param _bountyHackerHATVested The HAT bounty vested for the hacker"
            },
            "functionSelector": "70cb13b5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateHATSplit",
            "nameLocation": "13425:16:7",
            "parameters": {
              "id": 5397,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5394,
                  "mutability": "mutable",
                  "name": "_bountyGovernanceHAT",
                  "nameLocation": "13450:20:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5399,
                  "src": "13442:28:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5393,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13442:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5396,
                  "mutability": "mutable",
                  "name": "_bountyHackerHATVested",
                  "nameLocation": "13480:22:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5399,
                  "src": "13472:30:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5395,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13472:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13441:62:7"
            },
            "returnParameters": {
              "id": 5398,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13535:0:7"
            },
            "scope": 5556,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5405,
            "nodeType": "FunctionDefinition",
            "src": "13689:67:7",
            "nodes": [],
            "documentation": {
              "id": 5400,
              "nodeType": "StructuredDocumentation",
              "src": "13542:142:7",
              "text": " @notice Called by governance to set the default arbitrator.\n @param _defaultArbitrator The default arbitrator address"
            },
            "functionSelector": "a8acd946",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDefaultArbitrator",
            "nameLocation": "13698:20:7",
            "parameters": {
              "id": 5403,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5402,
                  "mutability": "mutable",
                  "name": "_defaultArbitrator",
                  "nameLocation": "13727:18:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5405,
                  "src": "13719:26:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5401,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13719:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13718:28:7"
            },
            "returnParameters": {
              "id": 5404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13755:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5411,
            "nodeType": "FunctionDefinition",
            "src": "13917:86:7",
            "nodes": [],
            "documentation": {
              "id": 5406,
              "nodeType": "StructuredDocumentation",
              "src": "13762:150:7",
              "text": " @notice Called by governance to set the default challenge period\n @param _defaultChallengePeriod The default challenge period"
            },
            "functionSelector": "22f84ada",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDefaultChallengePeriod",
            "nameLocation": "13926:25:7",
            "parameters": {
              "id": 5409,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5408,
                  "mutability": "mutable",
                  "name": "_defaultChallengePeriod",
                  "nameLocation": "13960:23:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5411,
                  "src": "13952:31:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5407,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13952:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13951:33:7"
            },
            "returnParameters": {
              "id": 5410,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14002:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5417,
            "nodeType": "FunctionDefinition",
            "src": "14173:114:7",
            "nodes": [],
            "documentation": {
              "id": 5412,
              "nodeType": "StructuredDocumentation",
              "src": "14009:159:7",
              "text": " @notice Called by governance to set the default challenge timeout\n @param _defaultChallengeTimeOutPeriod The Default challenge timeout"
            },
            "functionSelector": "f836c449",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDefaultChallengeTimeOutPeriod",
            "nameLocation": "14182:32:7",
            "parameters": {
              "id": 5415,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5414,
                  "mutability": "mutable",
                  "name": "_defaultChallengeTimeOutPeriod",
                  "nameLocation": "14232:30:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5417,
                  "src": "14224:38:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5413,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14224:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14214:54:7"
            },
            "returnParameters": {
              "id": 5416,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14286:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5423,
            "nodeType": "FunctionDefinition",
            "src": "14519:94:7",
            "nodes": [],
            "documentation": {
              "id": 5418,
              "nodeType": "StructuredDocumentation",
              "src": "14293:221:7",
              "text": " @notice Called by governance to set Whether the arbitrator can change bounty of claims.\n @param _defaultArbitratorCanChangeBounty The default for whether the arbitrator can change bounty of claims"
            },
            "functionSelector": "1b2cae6c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDefaultArbitratorCanChangeBounty",
            "nameLocation": "14528:35:7",
            "parameters": {
              "id": 5421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5420,
                  "mutability": "mutable",
                  "name": "_defaultArbitratorCanChangeBounty",
                  "nameLocation": "14569:33:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5423,
                  "src": "14564:38:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5419,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14564:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14563:40:7"
            },
            "returnParameters": {
              "id": 5422,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14612:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5429,
            "nodeType": "FunctionDefinition",
            "src": "14826:73:7",
            "nodes": [],
            "documentation": {
              "id": 5424,
              "nodeType": "StructuredDocumentation",
              "src": "14619:202:7",
              "text": " @notice Check that the given challenge period is legal, meaning that it\n is greater than 1 day and less than 5 days.\n @param _challengePeriod The challenge period to check"
            },
            "functionSelector": "ebf7830c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateChallengePeriod",
            "nameLocation": "14835:23:7",
            "parameters": {
              "id": 5427,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5426,
                  "mutability": "mutable",
                  "name": "_challengePeriod",
                  "nameLocation": "14867:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5429,
                  "src": "14859:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5425,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14859:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14858:26:7"
            },
            "returnParameters": {
              "id": 5428,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14898:0:7"
            },
            "scope": 5556,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5435,
            "nodeType": "FunctionDefinition",
            "src": "15137:87:7",
            "nodes": [],
            "documentation": {
              "id": 5430,
              "nodeType": "StructuredDocumentation",
              "src": "14905:227:7",
              "text": " @notice Check that the given challenge timeout period is legal, meaning\n that it is greater than 2 days and less than 85 days.\n @param _challengeTimeOutPeriod The challenge timeout period to check"
            },
            "functionSelector": "2ac60b7d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "validateChallengeTimeOutPeriod",
            "nameLocation": "15146:30:7",
            "parameters": {
              "id": 5433,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5432,
                  "mutability": "mutable",
                  "name": "_challengeTimeOutPeriod",
                  "nameLocation": "15185:23:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5435,
                  "src": "15177:31:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5431,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15177:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15176:33:7"
            },
            "returnParameters": {
              "id": 5434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15223:0:7"
            },
            "scope": 5556,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5441,
            "nodeType": "FunctionDefinition",
            "src": "15363:51:7",
            "nodes": [],
            "documentation": {
              "id": 5436,
              "nodeType": "StructuredDocumentation",
              "src": "15233:125:7",
              "text": " @notice Called by governance to set the fee setter role\n @param _feeSetter Address of new fee setter"
            },
            "functionSelector": "b19805af",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFeeSetter",
            "nameLocation": "15372:12:7",
            "parameters": {
              "id": 5439,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5438,
                  "mutability": "mutable",
                  "name": "_feeSetter",
                  "nameLocation": "15393:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5441,
                  "src": "15385:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5437,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15385:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15384:20:7"
            },
            "returnParameters": {
              "id": 5440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15413:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5449,
            "nodeType": "FunctionDefinition",
            "src": "15745:151:7",
            "nodes": [],
            "documentation": {
              "id": 5442,
              "nodeType": "StructuredDocumentation",
              "src": "15420:320:7",
              "text": " @notice Called by governance to set time limits for withdraw requests\n @param _withdrawRequestPendingPeriod Time period where the withdraw\n request is pending\n @param _withdrawRequestEnablePeriod Time period after the peding period\n has ended during which withdrawal is enabled"
            },
            "functionSelector": "398488eb",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWithdrawRequestParams",
            "nameLocation": "15754:24:7",
            "parameters": {
              "id": 5447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5444,
                  "mutability": "mutable",
                  "name": "_withdrawRequestPendingPeriod",
                  "nameLocation": "15796:29:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5449,
                  "src": "15788:37:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5443,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15788:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5446,
                  "mutability": "mutable",
                  "name": "_withdrawRequestEnablePeriod",
                  "nameLocation": "15844:28:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5449,
                  "src": "15835:37:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5445,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15835:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15778:100:7"
            },
            "returnParameters": {
              "id": 5448,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15895:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5455,
            "nodeType": "FunctionDefinition",
            "src": "16110:44:7",
            "nodes": [],
            "documentation": {
              "id": 5450,
              "nodeType": "StructuredDocumentation",
              "src": "15902:203:7",
              "text": " @notice Called by governance to set the fee for logging a claim for a\n bounty in any vault.\n @param _fee Claim fee in ETH to be transferred on any call of\n {logClaim}"
            },
            "functionSelector": "2e75ab50",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimFee",
            "nameLocation": "16119:11:7",
            "parameters": {
              "id": 5453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5452,
                  "mutability": "mutable",
                  "name": "_fee",
                  "nameLocation": "16139:4:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5455,
                  "src": "16131:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5451,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16131:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16130:14:7"
            },
            "returnParameters": {
              "id": 5454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16153:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5463,
            "nodeType": "FunctionDefinition",
            "src": "16817:121:7",
            "nodes": [],
            "documentation": {
              "id": 5456,
              "nodeType": "StructuredDocumentation",
              "src": "16160:652:7",
              "text": " @notice Called by governance to set the withdraw period and safety\n period, which are always interchanging.\n The safety period is time that the committee can submit claims for \n bounty payouts, and during which withdrawals are disabled and the\n bounty split cannot be changed.\n @param _withdrawPeriod Amount of time during which withdrawals are\n enabled, and the bounty split can be changed by the governance. Must be\n at least 1 hour.\n @param _safetyPeriod Amount of time during which claims for bounties \n can be submitted and withdrawals are disabled. Must be at most 6 hours."
            },
            "functionSelector": "520a924d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWithdrawSafetyPeriod",
            "nameLocation": "16826:23:7",
            "parameters": {
              "id": 5461,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5458,
                  "mutability": "mutable",
                  "name": "_withdrawPeriod",
                  "nameLocation": "16867:15:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5463,
                  "src": "16859:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5457,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16859:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5460,
                  "mutability": "mutable",
                  "name": "_safetyPeriod",
                  "nameLocation": "16900:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5463,
                  "src": "16892:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5459,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16892:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16849:70:7"
            },
            "returnParameters": {
              "id": 5462,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16937:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5471,
            "nodeType": "FunctionDefinition",
            "src": "17289:75:7",
            "nodes": [],
            "documentation": {
              "id": 5464,
              "nodeType": "StructuredDocumentation",
              "src": "16944:340:7",
              "text": " @notice Called by governance to set vesting params for rewarding hackers\n with rewardToken, for all vaults\n @param _duration Duration of the vesting period. Must be less than 180\n days.\n @param _periods The number of vesting periods. Must be more than 0 and \n less then the vesting duration."
            },
            "functionSelector": "dd072f03",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setHatVestingParams",
            "nameLocation": "17298:19:7",
            "parameters": {
              "id": 5469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5466,
                  "mutability": "mutable",
                  "name": "_duration",
                  "nameLocation": "17326:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5471,
                  "src": "17318:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5465,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17318:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5468,
                  "mutability": "mutable",
                  "name": "_periods",
                  "nameLocation": "17345:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5471,
                  "src": "17337:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5467,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17337:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17317:37:7"
            },
            "returnParameters": {
              "id": 5470,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17363:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5477,
            "nodeType": "FunctionDefinition",
            "src": "17615:52:7",
            "nodes": [],
            "documentation": {
              "id": 5472,
              "nodeType": "StructuredDocumentation",
              "src": "17370:240:7",
              "text": " @notice Called by governance to set the timelock delay for setting the\n max bounty (the time between setPendingMaxBounty and setMaxBounty)\n @param _delay The time period for the delay. Must be at least 2 days."
            },
            "functionSelector": "24cda22d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMaxBountyDelay",
            "nameLocation": "17624:17:7",
            "parameters": {
              "id": 5475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5474,
                  "mutability": "mutable",
                  "name": "_delay",
                  "nameLocation": "17650:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5477,
                  "src": "17642:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5473,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17642:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17641:16:7"
            },
            "returnParameters": {
              "id": 5476,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17666:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5506,
            "nodeType": "FunctionDefinition",
            "src": "18866:411:7",
            "nodes": [],
            "documentation": {
              "id": 5478,
              "nodeType": "StructuredDocumentation",
              "src": "17673:1188:7",
              "text": " @notice Create a new vault\n NOTE: Vaults should not use tokens which do not guarantee that the \n amount specified is the amount transferred\n @param _asset The vault's native token\n @param _committee The address of the vault's committee \n @param _rewardController The reward controller for the vault\n @param _maxBounty The maximum percentage of the vault that can be paid\n out as a bounty. Must be between 0 and `HUNDRED_PERCENT`\n @param _bountySplit The way to split the bounty between the hacker, \n hacker vested, and committee.\n   Each entry is a number between 0 and `HUNDRED_PERCENT`.\n   Total splits should be equal to `HUNDRED_PERCENT`.\n @param _descriptionHash Hash of the vault description.\n @param _bountyVestingDuration Vesting duration for the part of the bounty\n that is paid vested in the vault's native token\n @param _bountyVestingPeriods Vesting periods for the part of the bounty\n that is paid vested in the vault's native token\n @param _isPaused Whether to initialize the vault with deposits disabled\n @return vault The address of the new vault"
            },
            "functionSelector": "c99a02b0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createVault",
            "nameLocation": "18875:11:7",
            "parameters": {
              "id": 5502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5481,
                  "mutability": "mutable",
                  "name": "_asset",
                  "nameLocation": "18903:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "18896:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$13077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 5480,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5479,
                      "name": "IERC20",
                      "nameLocations": [
                        "18896:6:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 13077,
                      "src": "18896:6:7"
                    },
                    "referencedDeclaration": 13077,
                    "src": "18896:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$13077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5483,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "18927:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "18919:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5482,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18919:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5485,
                  "mutability": "mutable",
                  "name": "_committee",
                  "nameLocation": "18951:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "18943:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5484,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18943:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5488,
                  "mutability": "mutable",
                  "name": "_rewardController",
                  "nameLocation": "18989:17:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "18971:35:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRewardController_$5663",
                    "typeString": "contract IRewardController"
                  },
                  "typeName": {
                    "id": 5487,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5486,
                      "name": "IRewardController",
                      "nameLocations": [
                        "18971:17:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5663,
                      "src": "18971:17:7"
                    },
                    "referencedDeclaration": 5663,
                    "src": "18971:17:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRewardController_$5663",
                      "typeString": "contract IRewardController"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5490,
                  "mutability": "mutable",
                  "name": "_maxBounty",
                  "nameLocation": "19024:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19016:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19016:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5493,
                  "mutability": "mutable",
                  "name": "_bountySplit",
                  "nameLocation": "19073:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19044:41:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BountySplit_$4697_memory_ptr",
                    "typeString": "struct IHATVault.BountySplit"
                  },
                  "typeName": {
                    "id": 5492,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5491,
                      "name": "IHATVault.BountySplit",
                      "nameLocations": [
                        "19044:9:7",
                        "19054:11:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4697,
                      "src": "19044:21:7"
                    },
                    "referencedDeclaration": 4697,
                    "src": "19044:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BountySplit_$4697_storage_ptr",
                      "typeString": "struct IHATVault.BountySplit"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5495,
                  "mutability": "mutable",
                  "name": "_descriptionHash",
                  "nameLocation": "19109:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19095:30:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 5494,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "19095:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5497,
                  "mutability": "mutable",
                  "name": "_bountyVestingDuration",
                  "nameLocation": "19143:22:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19135:30:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5496,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19135:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5499,
                  "mutability": "mutable",
                  "name": "_bountyVestingPeriods",
                  "nameLocation": "19183:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19175:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5498,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19175:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5501,
                  "mutability": "mutable",
                  "name": "_isPaused",
                  "nameLocation": "19219:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19214:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5500,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "19214:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18886:348:7"
            },
            "returnParameters": {
              "id": 5505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5504,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "19270:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5506,
                  "src": "19262:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5503,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19262:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19261:15:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5514,
            "nodeType": "FunctionDefinition",
            "src": "19561:68:7",
            "nodes": [],
            "documentation": {
              "id": 5507,
              "nodeType": "StructuredDocumentation",
              "src": "19283:273:7",
              "text": " @notice Called by governance to change the UI visibility of a vault\n @param _vault The address of the vault to update\n @param _visible Is this vault visible in the UI\n This parameter can be used by the UI to include or exclude the vault"
            },
            "functionSelector": "aec1d108",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setVaultVisibility",
            "nameLocation": "19570:18:7",
            "parameters": {
              "id": 5512,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5509,
                  "mutability": "mutable",
                  "name": "_vault",
                  "nameLocation": "19597:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5514,
                  "src": "19589:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5508,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19589:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5511,
                  "mutability": "mutable",
                  "name": "_visible",
                  "nameLocation": "19610:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5514,
                  "src": "19605:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5510,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "19605:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19588:31:7"
            },
            "returnParameters": {
              "id": 5513,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "19628:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5527,
            "nodeType": "FunctionDefinition",
            "src": "20273:161:7",
            "nodes": [],
            "documentation": {
              "id": 5515,
              "nodeType": "StructuredDocumentation",
              "src": "19635:633:7",
              "text": " @notice Transfer the part of the bounty that is supposed to be swapped\n into HAT tokens from the HATVault to the registry, and keep track of\n the amounts to be swapped and sent/burnt in a later transaction\n @param _asset The vault's native token\n @param _hacker The address of the beneficiary of the bounty\n @param _hackersHatReward The amount of the vault's native token to be\n swapped to HAT tokens and sent to the hacker via a vesting contract\n @param _governanceHatReward The amount of the vault's native token to\n be swapped to HAT tokens and sent to governance"
            },
            "functionSelector": "5dd11415",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addTokensToSwap",
            "nameLocation": "20282:15:7",
            "parameters": {
              "id": 5525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5518,
                  "mutability": "mutable",
                  "name": "_asset",
                  "nameLocation": "20314:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5527,
                  "src": "20307:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$13077",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 5517,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5516,
                      "name": "IERC20",
                      "nameLocations": [
                        "20307:6:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 13077,
                      "src": "20307:6:7"
                    },
                    "referencedDeclaration": 13077,
                    "src": "20307:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$13077",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5520,
                  "mutability": "mutable",
                  "name": "_hacker",
                  "nameLocation": "20338:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5527,
                  "src": "20330:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5519,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "20330:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5522,
                  "mutability": "mutable",
                  "name": "_hackersHatReward",
                  "nameLocation": "20363:17:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5527,
                  "src": "20355:25:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5521,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20355:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5524,
                  "mutability": "mutable",
                  "name": "_governanceHatReward",
                  "nameLocation": "20398:20:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5527,
                  "src": "20390:28:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5523,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20390:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "20297:127:7"
            },
            "returnParameters": {
              "id": 5526,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "20433:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5542,
            "nodeType": "FunctionDefinition",
            "src": "21031:212:7",
            "nodes": [],
            "documentation": {
              "id": 5528,
              "nodeType": "StructuredDocumentation",
              "src": "20440:586:7",
              "text": " @notice Called by governance to swap the given asset to HAT tokens and \n distribute the HAT tokens: Send to governance their share and send to\n beneficiaries their share through a vesting contract.\n @param _asset The address of the token to be swapped to HAT tokens\n @param _beneficiaries Addresses of beneficiaries\n @param _amountOutMinimum Minimum amount of HAT tokens at swap\n @param _routingContract Routing contract to call for the swap\n @param _routingPayload Payload to send to the _routingContract for the\n swap"
            },
            "functionSelector": "e2b001bf",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swapAndSend",
            "nameLocation": "21040:11:7",
            "parameters": {
              "id": 5540,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5530,
                  "mutability": "mutable",
                  "name": "_asset",
                  "nameLocation": "21069:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5542,
                  "src": "21061:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5529,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21061:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5533,
                  "mutability": "mutable",
                  "name": "_beneficiaries",
                  "nameLocation": "21104:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5542,
                  "src": "21085:33:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 5531,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "21085:7:7",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 5532,
                    "nodeType": "ArrayTypeName",
                    "src": "21085:9:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5535,
                  "mutability": "mutable",
                  "name": "_amountOutMinimum",
                  "nameLocation": "21136:17:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5542,
                  "src": "21128:25:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5534,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21128:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5537,
                  "mutability": "mutable",
                  "name": "_routingContract",
                  "nameLocation": "21171:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5542,
                  "src": "21163:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5536,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21163:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5539,
                  "mutability": "mutable",
                  "name": "_routingPayload",
                  "nameLocation": "21212:15:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5542,
                  "src": "21197:30:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5538,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "21197:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21051:182:7"
            },
            "returnParameters": {
              "id": 5541,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21242:0:7"
            },
            "scope": 5556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5549,
            "nodeType": "FunctionDefinition",
            "src": "21401:106:7",
            "nodes": [],
            "documentation": {
              "id": 5543,
              "nodeType": "StructuredDocumentation",
              "src": "21251:141:7",
              "text": " @notice Returns the general parameters for all vaults\n @return {GeneralParameters} General parameters for all vaults"
            },
            "functionSelector": "2cc85f97",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGeneralParameters",
            "nameLocation": "21410:20:7",
            "parameters": {
              "id": 5544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21430:2:7"
            },
            "returnParameters": {
              "id": 5548,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5547,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5549,
                  "src": "21481:24:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_GeneralParameters_$5199_memory_ptr",
                    "typeString": "struct IHATVaultsRegistry.GeneralParameters"
                  },
                  "typeName": {
                    "id": 5546,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5545,
                      "name": "GeneralParameters",
                      "nameLocations": [
                        "21481:17:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5199,
                      "src": "21481:17:7"
                    },
                    "referencedDeclaration": 5199,
                    "src": "21481:17:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_GeneralParameters_$5199_storage_ptr",
                      "typeString": "struct IHATVaultsRegistry.GeneralParameters"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21480:26:7"
            },
            "scope": 5556,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 5555,
            "nodeType": "FunctionDefinition",
            "src": "21659:60:7",
            "nodes": [],
            "documentation": {
              "id": 5550,
              "nodeType": "StructuredDocumentation",
              "src": "21513:141:7",
              "text": " @notice Returns the number of vaults that have been previously created\n @return The number of vaults in the registry"
            },
            "functionSelector": "d3e0bc56",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getNumberOfVaults",
            "nameLocation": "21668:17:7",
            "parameters": {
              "id": 5551,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "21685:2:7"
            },
            "returnParameters": {
              "id": 5554,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5553,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5555,
                  "src": "21710:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5552,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21710:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "21709:9:7"
            },
            "scope": 5556,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IHATVaultsRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 5182,
          "nodeType": "StructuredDocumentation",
          "src": "204:1204:7",
          "text": "@title Interface for the Hats.finance Vault Registry\n @author hats.finance\n @notice The Hats.finance Vault Registry is used to deploy Hats.finance\n vaults and manage shared parameters.\n Hats.finance is a proactive bounty protocol for white hat hackers and\n security experts, where projects, community members, and stakeholders\n incentivize protocol security and responsible disclosure.\n Hats create scalable vaults using the project’s own token. The value of the\n bounty increases with the success of the token and project.\n The owner of the registry has the permission to set time limits and bounty\n parameters and change vaults' info, and to set the other registry roles -\n fee setter and arbitrator.\n The arbitrator can challenge submitted claims for bounty payouts made by\n vaults' committees, approve them with a different bounty percentage or\n dismiss them.\n The fee setter can set the fee on withdrawals on all vaults.\n This project is open-source and can be found at:\n https://github.com/hats-finance/hats-contracts\n @dev New hats.finance vaults should be created through a call to {createVault}\n so that they are linked to the registry"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          5556
        ],
        "name": "IHATVaultsRegistry",
        "nameLocation": "1419:18:7",
        "scope": 5557,
        "usedErrors": [
          5202,
          5205,
          5208,
          5211,
          5214,
          5217,
          5220,
          5223,
          5226,
          5229,
          5232,
          5235,
          5238,
          5241,
          5244,
          5247,
          5250,
          5253
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 7
}